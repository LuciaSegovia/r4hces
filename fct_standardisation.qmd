# Food Composition Table & Databases: Standardisation

## Objective

This document provide, together with the template document, the steps and description for cleaning and standardising FCTs from diverse sources. More details about the cleaned data that can be found in the repository is documented in this folder (documentation).

For easy navigation and use of this script it is recommended to use Rstudio. In RStudio please click the "Show Document Outline" button to the right of the source button, at the top right of this window. This will allow for easier navigation of the script.

# Environment Prep

First we need to check what [packages](link-to-packages-explanation) are installed. If you have run this template before in this RStudio project and are sure these packages are already installed, you can comment out (put a hash at the start of) line 20, and skip it.

```{r}

required_packages <- c("readxl", "stringr", "dplyr", "here", "measurements") #This line lists the required packages

install.packages(setdiff(required_packages, rownames(installed.packages()))) #This installs them if they aren't already installed.

lapply(required_packages, library, character.only=TRUE) #And then activates them

# Then, run this to clean the environment
rm(list = ls())

```

## Food composition functions

```{r}

# We also need to import some custom functions in another script:
source(here::here("functions.R")) # Loading nutrition functions

```

# Obtaining the raw (FCT) file(s) for importing

## Data License Check

Before using any dataset, we recommend to check licensing conditions & record the data source, you can use the [README template](link-to-readme-template).

## Data Download

If the data is publicly available online, usually you only need to run the code below to obtain the raw files. Remember you only need to do it the first time! Then, the data will be stored in the folder of your choice (see below).

For instance, many raw files can be found provided by the FAO here, in various formats - https://www.fao.org/infoods/infoods/tables-and-databases/en/

Once the link to the data is found, check what file type it is, and paste the direct file link to replace the fill-in value below.

Please note: in the chunck of code below, the 'template' is a fill in value for a folder - if you wish to store this file in a folder, you must create a folder in your here::here location (found by running `here::here()`) and replace 'template' with that folders name. It is also important to make sure that the filename you pick for the downloaded file has the same file suffix (e.g. '.xlsx') as the file you are downloading.

```{r}

f <- "http://www.the-source-of-the-data/.../the-file-data.xlsx"

download.file(f,  # the location where is downloaded from 
   destfile = here::here('template', "the-file-name-of-data.xlsx"), # the location where you                                                 wish the file to be stored in your computer. 
            method="wininet", # use "curl" for OS X / Linux, "wininet" for Windows 
            mode="wb")


```

## File names conventions

We advise to use the ISO code (2 digits) (see [ISO 3166 2-alpha code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) for further information) of the country or the region of the FCT scope, plus the two last digits of the year of publication to name, both the folder which will contain the data and the scripts related to the FCT. For instance, Kenya FCT, 2018 will be coded as KE18. This will help with the interoperability, reusability and findability of the data. Also, to streamline the work in the future. That name convention will be used also as the identifier of the FCT. See section X.x. Variable re-naming.

# Importing the data (loading the data)

## Identifying the file

### Using the download code above (1.2.)

First, we must find the file on your system that we want to import. If using RStudio: If you used the download method above [Section 1.2](link-to-section) then we will see the same location as specified there to specify the file. Simply copy the contents of the here::here brackets and use it to fill the here::here brackets in the line of code below.

```{r}

#This identifies the file and file path, and saves it as a variable
FCT_file_location <- here::here('template', "the-file-name-of-data.xlsx") 

```

### Using here::here()

#### A brief introduction to here::here()

If you are using an RStudio project but used a different download method, or already have the file you want to process on your computer, or are using base R we can still use the here::here function, however we will have to find the file first. The best practice is to put the file in the same folder as this script, or in a folder within the project. If this is done, then use `here::here()` to find your current working directory, and then navigate to the file folder. 

```{r}

# Run this script to see where is your directory
here::here()

```


In order to navigate there, you have to include each subfolder between the `here::here` location and the file itself (so the 'Research' folder, the 'FCT_cleaning' folder and the 'FCT_1' folder). To do this, specify these folders in here::here, and then specify the file itself, like so: `here::here('Research', 'FCT_cleaning', 'FCT_1', 'The_actual_fct.xlsx')`. If using an RStudio project, and you put this .R file and the data file in the same folder as the RStudio project or within a subfolder, this is much easier as your project/here::here location automatically moves to the main project folder. More information about the here package can be found [here](https://here.r-lib.org/).

#### Using here::here()

Find your file in your computer, and then direct here::here to it - e.g.: (edit the line below to match your file location, remove hash from the start of the line below and run)

```{r}

FCT_file_location <- here::here('Research', 'FCT_cleaning', 'FCT_1', 'The_actual_fct.xlsx') # This identifies the file and file path, and saves it as a variable

```

## Importing Files

During import, a identifier for the FCT is created and added to the table. Please replace 'MW19' from the next code chunck with the FCT id., comprised of the countries [ISO 3166 2-alpha code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes), and the year the FCT was produced (e.g. for the Malawi FCT from 2019, the reference would be 'MW19'). This should be the same as the folder name explained in (section 1.3)\[link-to-section\].

```{r}

# This is an example of the name 
FCT_id <- 'MW19' # Change two first letter for your ISO 2 code & the two digits for the last two digits of the year of publication.

```

FCT files come in many different forms - the most common being ".xlsx" files and ".csv" files. Methods to import both of these file types will be covered - please navigate to the relevant subsection.

### Importing .xlsx files

For the excel-type of files, first, you need to check what information is provided and which of the sheet is providing the FC data.

```{r}

data.df <- readxl::read_excel(FCT_file_location, #The file location, as                            identified in section 2.1
                              sheet = 1  # Change to the excel sheet where                              the FCT is stored in the excel file
                              ) %>%  
  mutate(source_fct = FCT_ref)  #Creates the source_fct column and fills with                 a id for this FCT, as filled in in section 2.2. 

```

### Importing .csv files

```{r}

data.df <- read.csv2(FCT_file_location, #The file location, as identified in section 2.1
                     sep = ",") %>%  # Replace w/ other symbol if needed
  mutate(source_fct = FCT_ref) #Creates the source_fct column and fills with a id for this FCT, as filled in in section 2.2. 

```

Once imported, it is important to check the data.frame created from the csv, by using `head(data.df)` or clicking on its entry in the Environment panel of RStudio (This second option is not advised with very large files, however, as it can be slow).

If the data shown by doing this has all its columns combined, with a symbol in-between, then that symbol (e.g. ';') is the separator for that csv. Replace comma in the `sep = ","` line from the code block above with the \# new symbol, and run the entire block again.

```{r}

# Checking the dataframe
head(data.df)

```

## Checking the loaded data

## How many rows & columns have the data?

```{r}

dim(data.df) # rows & columns

```

## What are the variables names?

```{r}

names(data.df)

```

If we are happy that we have loaded the correct FCT file, then proceed. If not, find the correct file and import it instead.

# Data Formatting

## Visually checking the data

```{r}
# Checking the first rows and columns
head(data.df) 

# Checking the last rows and columns
tail(data.df)

# Opening the dataframe in a tab, 
#Note: if the dataset is very very big, may crash the R session.
View(data.df)

```

## Trimming dataframe rows

Running this will trim down the table to only include the row numbers between x and y - replace x and y with your desired values. If you wanted to include multiple row ranges, that is also possible - use comments to differentiate between different row ranges and individual rows. e.g. if you wanted to include rows a:b, row c, row e, and rows g:x, then the code would be `slice(a:b, c, e, g:x)`.

```{r}

data.df <- data.df %>% slice(x:y)

```

