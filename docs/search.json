[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Household Consumption and Expenditure Surveys",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "index.html#about-this-manual",
    "href": "index.html#about-this-manual",
    "title": "R for Household Consumption and Expenditure Surveys",
    "section": "About this manual",
    "text": "About this manual\nThis manual is designed for absolute beginners who are interested in using R and RStudio for nutrition analysis of household consumption and expenditure surveys(HCES). The manual is an adaptation of materials for statistical analysis of HCES developed by the Micronutrient Action Policy Support(MAPS) Project and made available to all for use, without warranty or liability. The MAPS project is funded by the Bill and Melinda Gates Foundation."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "R for Household Consumption and Expenditure Surveys",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe would like to thank the following people for their contributions to this manual: Liberty Mlambo, Lucia Sergovia de la Revilla, Thomas Codd,Gareth Osman, Kevin Tang, Gareth Osman,,Tineka Blake,Edaward Joy,Louise E. Ander"
  },
  {
    "objectID": "index.html#who-is-this-manual-for",
    "href": "index.html#who-is-this-manual-for",
    "title": "R for Household Consumption and Expenditure Surveys",
    "section": "Who is this manual for?",
    "text": "Who is this manual for?\nThe goal of this manual is to provide a comprehensive introduction to these powerful technologies and to teach you how to use them to better understand your data and collaborate with others on your project.\nThroughout this manual, you will learn how to install and set up R and RStudio on your computer, as well as how to use them to perform data analysis, create visualizations, and manage your code. The manual includes step-by-step instructions, examples, and practice exercises to help you master these technologies.\nWhether you are a researcher, data scientist, or statistician, this manual will provide you with the skills and knowledge you need to start using R and RStudio for HCES analysis, to better understand your data and collaborate with others on your project.\nIt is important to note that this manual is not a comprehensive guide to R and RStudio but rather an introduction, designed to give you the foundational knowledge to start working with these technologies. There are many other resources available for learning more about these technologies, including online tutorials, forums, and documentation.\nWe hope you find this manual helpful and that it empowers you to work with these powerful tools."
  },
  {
    "objectID": "intro.html#software-requirements",
    "href": "intro.html#software-requirements",
    "title": "1  Introduction",
    "section": "Software requirements",
    "text": "Software requirements\nFirst, we will cover R, which is a powerful and versatile programming language that is widely used for data analysis, statistical modeling, and data visualization.\n\nIt is an open-source software that can be freely downloaded and used by anyone. R is widely used in academia, industry, and government, and is becoming increasingly popular among data scientists and analysts.\nIt is a great tool for those who have been using other statistics tools like Excel, SAS, SPSS and want to take their data analysis skills to the next level.\n\nThis training will provide an introduction to the basics of R and will give you the skills you need to start working with data in R..\nNext, we will introduce RStudio, which is a popular integrated development environment (IDE) for R.\n\nRStudio provides a user-friendly interface for working with R and makes it easy to work with R packages, which are collections of pre-written R code that can be used to perform specific tasks.\nWith RStudio, you will be able to write, test, and debug your R code, and easily share your work with others.\n\n\n\n\nsource: https://moderndive.netlify.app/1-getting-started.html\n\n\nThis manual will provide step-by-step instructions for installing and setting up R and RStudio on your computer. We will also go over basic concepts and commands for working with each technology, as well as provide examples of how to use them in different contexts. With this manual, you will have the skills and knowledge you need to start using these powerful technologies to better understand your data and collaborate with others on your project."
  },
  {
    "objectID": "intro.html#downloading-and-installing-r-and-rstudio",
    "href": "intro.html#downloading-and-installing-r-and-rstudio",
    "title": "1  Introduction",
    "section": "Downloading and Installing R and Rstudio",
    "text": "Downloading and Installing R and Rstudio\n\n\nDownloading and Installing R\n\nTo download R, you can visit the official R website at https://cran.r-project.org/. On the website, you will see links to download the latest version of R for Windows, Mac, and Linux. Once you have downloaded the installer for your operating system, you can run the installer and follow the prompts to install R on your computer.\nDownloading and installing R:\n\n\n\n\n\n\nInstructions for downloading and Installing R\n\n\n\n\n\nStep 1:\n\nStep 2:\n\nStep 3:\n\nStep 4:\n\nStep 5:\n\nStep 6:\n\nStep 7:\n\nStep 8:\n\n\n\n\n\n\nDownloading and Installing RStudio\nTo download RStudio, you can visit the official RStudio website at https://rstudio.com/products/rstudio/download/. On the website, you will see links to download the latest version of RStudio for Windows, Mac, and Linux. Once you have downloaded the installer for your operating system, you can run the installer and follow the prompts to install RStudio on your computer. \n\n\n\n\n\n\nInstructions for downloading and Installing Rstudio\n\n\n\n\n\nStep 1: Navigate to https://posit.co/download/rstudio-desktop/\n\nStep 2:\n\nStep 3:\n\nStep 4:\n\n\n\n\nPlease note that these are general instructions for a Microsoft Windows operating system, and depending on your system setup and security settings, some steps might be slightly different. Also, you will need to make sure that you have administrative access or permission to install the software on your computer.\nYou can also refer to the software website instruction or online tutorials that are specific to your operating system and setup.\nFrom here we will use the term R to refer to R and Rstudio or vice-versa.\n\n\n\nSource: https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html"
  },
  {
    "objectID": "intro.html#recommended-setup-while-using-this-book",
    "href": "intro.html#recommended-setup-while-using-this-book",
    "title": "1  Introduction",
    "section": "Recommended setup while using this book",
    "text": "Recommended setup while using this book\nStep 1: Download the training files from the following link: https://dzvoti.github.io/mapsR/mapsR-Training.zip\nStep 2: Unzip the file and save it in a folder on your computer.\nStep 3: Open RStudio create a new project using an existing folder. Select the folder where you saved the training files."
  },
  {
    "objectID": "hcesNutR.html",
    "href": "hcesNutR.html",
    "title": "3  hcesNutR package",
    "section": "",
    "text": "The goal of hcesNutR is a package that will help with the analysis of the Household Consumption Expenditure Survey (HCES) data. A good source of HCES data is the world bank microdata repository. The package contains functions that help with the analysis of HCES data. The package also contains a sample_hces.dta used to demonstrate the use of the functions in the package, you can download this data after installing the package by running hcesNutR::sample_hces() in your R console. The package is still under development and will be updated regularly, you can follow its progress at https://www.github.com/dzvoti/hcesNutR and please report any bugs or issues and request features here\n\nInstallation\nYou can install the development version of hcesNutR from GitHub with the following code:\n\ndevtools::install_github(\"dzvoti/hcesNutR\")\n\nPlease note that the devtools package is required for installations from GitHub so please run the following lines instead:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"dzvoti/hcesNutR\")\n\n\n\nLoad the hcesNutR package to make it available in your environment.\n\nlibrary(hcesNutR)\n\n\n\nhcesNutR package description.\n\n\nhcesNutR package Example workflow\nThis is a basic example which shows you the use of the functions in the package. The example uses the sample_hces.dta data that is included in the package. You can download the data by running hcesNutR::sample_hces() in your R console. The data is randomly generated to mimic the structure of the Fifth Integrated Household Survey 2019-2020 an HCES of Malawi. The variables and structure of this data is found here\n\nImport and explore the sample data\n\n# Import the data using the haven package from the tidyverse\n# TODO: replace this sample data with the open version of the IHS5 data\nsample_hces <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_G1.dta\"))\n\n# Preview\nsample_hces\n\n\n# Preview first 5 rows\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n# Preview the structure of the data\nstr(sample_hces)\n\n\n\nTrim the data\nIn this example we will use hcesNutR functions to demonstrate processing of total consumption data. The total consumption data is the data that contains the total consumption of each food item by each household. The other consumption columns contain values for consumption from sources i.e. gifted, purchased, ownProduced. The workflow for processing these is the same as demonstrated below.\n\n# Trim the data to total consumption\nsample_hces <- sample_hces |> dplyr::select(case_id:HHID, hh_g01:hh_g03c_1)\n\n# Preview\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n# Check the results\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\nColumn Naming Conventions and Renaming\nThe sample_hces data is in stata format which contains data with short column name codes that have associated “question” labels that explain the contents of the data. To make the column names more interpretable, the package provides the rename_hces function, which can be used to rename the column codes to standard hces names used downstream.\nThe rename_hces function uses column names from the standard_name_mappings_pairs dataset within the package. Alternatively, a user can create their own name pairs or manually rename their columns to the standard names.\nIt is important to note that all downstream functions in the hcesNutR package work with standard names and will not work with the short column names. Therefore, it is recommended to use the rename_hces() function to ensure that the column names are consistent with the package’s naming conventions.\nFor more information on how to use the rename_hces function, please refer to the function’s documentation: rename_hces.\n\n# Rename the variables\nsample_hces <-\n  hcesNutR::rename_hces(sample_hces, country_name = \"MWI\", survey_name = \"IHS5\")\n\n# View the results\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nRemove unconsumed food items\nHCES surveys administer a standard questionaire to each household where they are asked to conform whether they consumed the food items on their standard list. If a household did not consume a food item, the value of the ‘consYN’ is set to a constant. The remove_unconsumed function removes all food items that were not consumed by the household. The function takes in a data frame and the name of the column that contains the consumption information. The function also takes in the value that indicates that the food item was consumed.\n\n# Remove unconsumed food items\nsample_hces <- hcesNutR::remove_unconsumed(sample_hces, consCol = \"consYN\", consVal = 1)\n\n# Preview the results\nsample_hces\n# Preview the results as table\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nCreate two columns from each dbl+lbl column\nThe create_dta_labels function creates two columns from each dbl+lbl (double plus label) column. The first column contains the numeric values and the second column contains the labels. The function takes in a data frame and finds all columns that contains the double plus label column. The function returns a data frame with the new columns.\n\n# Split dbl+lbl columns\nsample_hces <- hcesNutR::create_dta_labels(sample_hces)\n\n# Preview\nsample_hces\n\n# Preview the results as table\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nData cleaning\nSome HCES data surveys split consumption food item or their consumption units into multiple columns. The concatenate_columns function cleans the data by combining the split columns into one column. The function can exclude values from contatenation by specifying the whole or part of values to be excluded.\n\nConcatenate food item names\n\n# Merge food item names\nsample_hces <- hcesNutR::concatenate_columns(sample_hces, c(\"item_code_name\", \"item_oth\"), \"SPECIFY\", \"item_code_name\")\n\n# Preview the results as table\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nConcatenate food item units\n\n# Merge consumption unit names. For units it is essential to remove parentesis as they are the major cause of duplicate units\nsample_hces <- hcesNutR::concatenate_columns(sample_hces, c(\"cons_unit_name\", \"cons_unit_oth\", \"cons_unit_size_name\", \"hh_g03c_1_name\"), \"SPECIFY\", \"cons_unit_name\", TRUE)\n\n# Preview the results as table\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nUse the select and rename functions from the dplyr package to subset the columns containing food item name , food item code, food unit name and food unit code\n\nsample_hces <- sample_hces |>\n  dplyr::select(case_id, hhid, item_code_name, item_code_code, cons_unit_name, cons_unitA, cons_quant) |>\n  dplyr::rename(food_name = item_code_name, food_code = item_code_code, cons_unit_code = cons_unitA)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nMatch survey food items to standard food items\nThe match_food_names function is useful for standardising survey food names. This is feasible due to an internal dataset of standard food item names matched with their corresponding survey food names for supported surveys. Alternatively users can use their own food matching names by passing a csv to the function. See hcesNutR::food_list for csv structure.\n\nsample_hces <- match_food_names_v2(sample_hces, country = \"MWI\", survey = \"IHS5\", food_name_col = \"food_name\", food_code_col = \"food_code\", overwrite = FALSE)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nMatch survey consumption units to standard consumption units\nThe match_food_units_v2 function is useful for standardising survey consumption units. This is feasible due to an internal dataset of standard consumption units matched with their corresponding survey consumption units for supported surveys. Alternatively users can download our template from hcesNutR::unit_names_n_codes_df and modify it to use their own consumption unit matching names.\n\nsample_hces <- match_food_units_v2(sample_hces, country = \"MWI\", survey = \"IHS5\", unit_name_col = \"cons_unit_name\", unit_code_col = \"cons_unit_code\", matches_csv = NULL, overwrite = FALSE)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nAdd regions and districts to the data\nIdentify the HCES module that contains household identifiers. In some cases this will already be present in the HCES data and should be skipped. From the household identifiers select the ones that are required and add to the data. In this example we will add the region and district identifiers to the data from the hh_mod_a_filt.dta file.\n\n# Import household identifiers from the hh_mod_a_filt.dta file\nhousehold_identifiers <- haven::read_dta(here::here(\"data\", \"sample_data\", \"hh_mod_a_filt.dta\")) |>\n  # subset the identifiers and keep only the ones needed.\n  dplyr::select(case_id, HHID, region) |>\n  dplyr::rename(hhid = HHID)\n\n# Add the identifiers to the data\nsample_hces <- dplyr::left_join(sample_hces, household_identifiers, by = c(\"hhid\", \"case_id\"))\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nCreate a measure id column\nThe create_measure_id function creates a measure id column that is used to identify the consumption measure of each food item. The function takes in a data frame and the name of the column that contains the consumption information. The function also takes in the value that indicates that the food item was consumed.\n\n# Create measure id column\nsample_hces <- create_measure_id(sample_hces, country = \"MWI\", survey = \"IHS5\", cols = c(\"region\", \"matched_cons_unit_code\", \"matched_food_code\"), include_ISOs = FALSE)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nImport food conversion factors.\nThe available data comes with a `food_conversion fcators file which has conversion fcators that link the food names and units to their corresponding\n\n# Import food conversion factors file\nIHS5_conv_fct <- readr::read_csv(here::here(\"data-ignore\",\"IHS5\",\"ihs5factors_clean.csv\"))\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Remane columns for consistency\nIHS5_conv_fct <- dplyr::rename(IHS5_conv_fct, food_item_code = item_code, food_item_name = item_name)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Clean the food names and codes to match those in the IHS5 data\nIHS5_conv_fct <- concatenate_columns(IHS5_conv_fct, c(\"unit_name\",\"Otherunit\"), \"SPECIFY\", \"unit_name\", FALSE) \n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Match food names and codes to those in the IHS5 data\nIHS5_conv_fct <- match_food_names_v2(IHS5_conv_fct, country=\"MWI\", survey=\"IHS5\", food_name_col=\"food_item_name\", food_code_col=\"food_item_code\", matches_csv = NULL, overwrite = TRUE)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Match the food unit names and codes to those in the IHS5 data\nIHS5_conv_fct <- match_food_units_v2(IHS5_conv_fct, country=\"MWI\", survey=\"IHS5\", unit_name_col=\"unit_name\", unit_code_col=\"unit_code\", matches_csv = NULL, overwrite = TRUE)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Create a measure id column\nIHS5_conv_fct <- create_measure_id(IHS5_conv_fct, country = \"MWI\", survey = \"IHS5\", cols = c(\"region\", \"matched_unit_code\", \"matched_food_code\"), include_ISOs = FALSE)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\nCheck if the conversion factors file contain all the expected conversion factors for the hces data being processed.\n\n# Check conversion factors \ncheck_conv_fct(hces_df = sample_hces, conv_fct_df = IHS5_conv_fct) \n\nCalculate weight of food items in kilograms.\n\nsample_hces <- apply_wght_conv_fct(hces_df =sample_hces, conv_fct_df=IHS5_conv_fct,factor_col = \"factor\",measure_id_col = \"measure_id\",wt_kg_col = \"wt_kg\",cons_qnty_col = \"cons_quant\", allowDuplicates = TRUE)\n\nsample_hces |>\nhead(10)|>\nknitr::kable()\n\n\nCalculate AFE/AME and add to the data\n\nAssumptions\nMerge HH demographic data with AME/AFE factors Men’s weight: 65kg (assumption) Women’s weight: 55kg (from DHS) PAL: 1.6X the BMR\n\n\nImport data required\nIn order to calculate the AFE and AME metrics we require the following data: - Household roster with the sex and age of each individual - Household health - AFE and AME factors\n\n# Import data of the roster and health modules of the IHS5 survey\nihs5_roster <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_B.dta\"))\nihs5_health <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_D.dta\"))\n\n# Import data of the AME/AFE factors and specifications\name_factors <- read.csv(here::here(\"data-ignore\", \"IHS5\", \"ihs5.ame.factors.csv\")) |>\n    janitor::clean_names()\n\name_spec_factors <- read.csv(here::here(\"data-ignore\", \"IHS5\", \"ihs5.ame.spec.csv\")) |>\n    janitor::clean_names() |>\n    # Rename the population column to cat and select the relevant columns\n    dplyr::rename(cat = population) |>\n    dplyr::select(cat, ame_spec, afe_spec)\n\n\n\nExtra energy requirements for pregnancy\n\n# # Extra energy requirements for pregnancy and Illness\npregnantPersons <- ihs5_health |>\n    dplyr::filter(hh_d05a == 28 | hh_d05b == 28) |> # NOTE: 28 is the code for pregnancy in this survey\n    dplyr::mutate(ame_preg = 0.11, afe_preg = 0.14) |> # NOTE: where do these values come from, DHS?\n    dplyr::select(HHID, ame_preg, afe_preg)\n\n# Preview\npregnantPersons |>\n    head() |>\n    knitr::kable()\n\n\n\n\nProcess HH roster data\n\n# Process the roster data and rename variables to be more intuitive\naMFe_summaries <- ihs5_roster |>\n    # Rename the variables to be more intuitive\n    dplyr::rename(sex = hh_b03, age_y = hh_b05a, age_m = hh_b05b) |>\n    dplyr::mutate(age_m_total = (age_y * 12 + age_m)) |> # NOTE: why not just use age as below.\n    # Add the AME/AFE factors to the roster data\n    dplyr::left_join(ame_factors, by = c(\"age_y\" = \"age\")) |> # Why use only age here and neglect months e.g 4.9years is close to 5 No??\n    dplyr::mutate(\n        ame_base = dplyr::case_when(sex == 1 ~ ame_m, sex == 2 ~ ame_f),\n        afe_base = dplyr::case_when(sex == 1 ~ afe_m, sex == 2 ~ afe_f),\n        age_u1_cat = dplyr::case_when(\n          # NOTE: Round here will ensure that decimals are not ommited in the calculation.\n            round(age_m_total) %in% 0:5 ~ \"0-5 months\",\n            round(age_m_total) %in% 6:8 ~ \"6-8 months\",\n            round(age_m_total) %in% 9:11 ~ \"9-11 months\"\n        )\n    ) |> \n    # Add the AME/AFE factors for the specific age categories\n    dplyr::left_join(ame_spec_factors, by = c(\"age_u1_cat\" = \"cat\")) |>\n    # Dietary requirements for children under 1 year old\n    dplyr::mutate(\n        ame_lac = dplyr::case_when(age_y < 2 ~ 0.19),\n        afe_lac = dplyr::case_when(age_y < 2 ~ 0.24)\n    ) |>\n    dplyr::rowwise() |>\n    # TODO: Will it not be better to have the pregnancy values added at the same time here?\n    dplyr::mutate(ame = sum(c(ame_base, ame_spec, ame_lac), na.rm = TRUE), afe = sum(c(afe_base, afe_spec, afe_lac), na.rm = TRUE)) |>\n    # Calculate number of individuals in the households\n    dplyr::group_by(HHID) |>\n    dplyr::summarize(\n        hh_persons = dplyr::n(),\n        hh_ame = sum(ame),\n        hh_afe = sum(afe)\n    ) |>\n    # Merge with the pregnancy and illness data\n    dplyr::left_join(pregnantPersons, by = \"HHID\") |>\n    dplyr::rowwise() |>\n    dplyr::mutate(\n        hh_ame = sum(c(hh_ame, ame_preg), na.rm = T),\n        hh_afe = sum(c(hh_afe, afe_preg), na.rm = T)\n    ) |>\n    dplyr::ungroup() |>\n    # Fix single household factors\n    dplyr::mutate(\n        hh_ame = dplyr::if_else(hh_persons == 1, 1, hh_ame),\n        hh_afe = dplyr::if_else(hh_persons == 1, 1, hh_afe)\n    ) |>\n    dplyr::select(HHID, hh_persons, hh_ame, hh_afe) |>\n    dplyr::rename(hhid = HHID)\n\n# Preview\naMFe_summaries |> head() |> knitr::kable()\n\n\nJoin the AFE/AME data to our Household Consumption and Expenditure survey data\n\nsample_hces <- sample_hces |> dplyr::left_join(aMFe_summaries)\n\nsample_hces |> head() |> knitr::kable()"
  },
  {
    "objectID": "hcesNutR.html#installation",
    "href": "hcesNutR.html#installation",
    "title": "3  Reporting bugs",
    "section": "Installation",
    "text": "Installation\nYou can install the development version of hcesR2 from GitHub with:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"dzvoti/hcesNutR\")\n\n\nlibrary(hcesNutR)"
  },
  {
    "objectID": "hcesNutR.html#example",
    "href": "hcesNutR.html#example",
    "title": "3  Reporting bugs",
    "section": "Example",
    "text": "Example\nThis is a basic example which shows you the use of the functions in the package. The example uses the sample_hces.dta data that is included in the package. You can download the data by running hcesNutR::sample_hces() in your R console. The data is randomly generated to mimic the structure of the Fifth Integrated Household Survey 2019-2020 an HCES of Malawi. The variables and structure of this data is found here"
  },
  {
    "objectID": "hcesNutR.html#import-and-explore-the-sample-data",
    "href": "hcesNutR.html#import-and-explore-the-sample-data",
    "title": "3  Reporting bugs",
    "section": "Import and explore the sample data",
    "text": "Import and explore the sample data\n\n# Import the data using the haven package from the tidyverse\n# TODO: replace this sample data with the open version of the IHS5 data\nsample_hces <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_G1.dta\"))\n\n# Preview\nsample_hces\n\n\n# Preview first 5 rows\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n# Preview the structure of the data\nstr(sample_hces)\n\n\nTrim the data\nIn this example we will use hcesNutR functions to demonstrate processing of total consumption data. The total consumption data is the data that contains the total consumption of each food item by each household. The other consumption columns contain values for consumption from sources i.e. gifted, purchased, ownProduced. The workflow for processing these is the same as demonstrated below.\n\n# Trim the data to total consumption\nsample_hces <- sample_hces |> dplyr::select(case_id:HHID, hh_g01:hh_g03c_1)\n\n# Preview\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n# Check the results\nsample_hces |>\n  head(5) |>\n  knitr::kable()"
  },
  {
    "objectID": "hcesNutR.html#hcesnutr-workflow",
    "href": "hcesNutR.html#hcesnutr-workflow",
    "title": "3  Reporting bugs",
    "section": "hcesnutR workflow",
    "text": "hcesnutR workflow\n\nColumn Naming Conventions and Renaming\nThe sample_hces data is in stata format which contains data with short column name codes that have associated “question” labels that explain the contents of the data. To make the column names more interpretable, the package provides the rename_hces function, which can be used to rename the column codes to standard hces names used downstream.\nThe rename_hces function uses column names from the standard_name_mappings_pairs dataset within the package. Alternatively, a user can create their own name pairs or manually rename their columns to the standard names.\nIt is important to note that all downstream functions in the hcesNutR package work with standard names and will not work with the short column names. Therefore, it is recommended to use the rename_hces() function to ensure that the column names are consistent with the package’s naming conventions.\nFor more information on how to use the rename_hces function, please refer to the function’s documentation: rename_hces.\n\n# Rename the variables\nsample_hces <-\n  hcesNutR::rename_hces(sample_hces, country_name = \"MWI\", survey_name = \"IHS5\")\n\n# View the results\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nRemove unconsumed food items\nHCES surveys administer a standard questionaire to each household where they are asked to conform whether they consumed the food items on their standard list. If a household did not consume a food item, the value of the ‘consYN’ is set to a constant. The remove_unconsumed function removes all food items that were not consumed by the household. The function takes in a data frame and the name of the column that contains the consumption information. The function also takes in the value that indicates that the food item was consumed.\n\n# Remove unconsumed food items\nsample_hces <- hcesNutR::remove_unconsumed(sample_hces, consCol = \"consYN\", consVal = 1)\n\n# Preview the results\nsample_hces\n# Preview the results as table\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nCreate two columns from each dbl+lbl column\nThe create_dta_labels function creates two columns from each dbl+lbl (double plus label) column. The first column contains the numeric values and the second column contains the labels. The function takes in a data frame and finds all columns that contains the double plus label column. The function returns a data frame with the new columns.\n\n# Split dbl+lbl columns\nsample_hces <- hcesNutR::create_dta_labels(sample_hces)\n\n# Preview\nsample_hces\n\n# Preview the results as table\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nData cleaning\nSome HCES data surveys split consumption food item or their consumption units into multiple columns. The concatenate_columns function cleans the data by combining the split columns into one column. The function can exclude values from contatenation by specifying the whole or part of values to be excluded.\n\nExample 1: Concatenate food item names\n\n# Merge food item names\nsample_hces <- hcesNutR::concatenate_columns(sample_hces, c(\"item_code_name\", \"item_oth\"), \"SPECIFY\", \"item_code_name\")\n\n# Preview the results as table\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nExample 2: Concatenate food item units\n\n# Merge consumption unit names. For units it is essential to remove parentesis as they are the major cause of duplicate units\nsample_hces <- hcesNutR::concatenate_columns(sample_hces, c(\"cons_unit_name\", \"cons_unit_oth\", \"cons_unit_size_name\", \"hh_g03c_1_name\"), \"SPECIFY\", \"cons_unit_name\", TRUE)\n\n# Preview the results as table\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\n\nUse the select and rename functions from the dplyr package to subset the columns containing food item name , food item code, food unit name and food unit code\n\nsample_hces <- sample_hces |>\n  dplyr::select(case_id, hhid, item_code_name, item_code_code, cons_unit_name, cons_unitA, cons_quant) |>\n  dplyr::rename(food_name = item_code_name, food_code = item_code_code, cons_unit_code = cons_unitA)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nMatch survey food items to standard food items\nThe match_food_names function is useful for standardising survey food names. This is feasible due to an internal dataset of standard food item names matched with their corresponding survey food names for supported surveys. Alternatively users can use their own food matching names by passing a csv to the function. See hcesNutR::food_list for csv structure.\n\nsample_hces <- match_food_names_v2(sample_hces, country = \"MWI\", survey = \"IHS5\", food_name_col = \"food_name\", food_code_col = \"food_code\", overwrite = FALSE)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nMatch survey consumption units to standard consumption units\nThe match_food_units_v2 function is useful for standardising survey consumption units. This is feasible due to an internal dataset of standard consumption units matched with their corresponding survey consumption units for supported surveys. Alternatively users can download our template from hcesNutR::unit_names_n_codes_df and modify it to use their own consumption unit matching names.\n\nsample_hces <- match_food_units_v2(sample_hces, country = \"MWI\", survey = \"IHS5\", unit_name_col = \"cons_unit_name\", unit_code_col = \"cons_unit_code\", matches_csv = NULL, overwrite = FALSE)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nAdd regions and districts to the data\nIdentify the HCES module that contains household identifiers. In some cases this will already be present in the HCES data and should be skipped. From the household identifiers select the ones that are required and add to the data. In this example we will add the region and district identifiers to the data from the hh_mod_a_filt.dta file.\n\n# Import household identifiers from the hh_mod_a_filt.dta file\nhousehold_identifiers <- haven::read_dta(here::here(\"data\", \"sample_data\", \"hh_mod_a_filt.dta\")) |>\n  # subset the identifiers and keep only the ones needed.\n  dplyr::select(case_id, HHID, region) |>\n  dplyr::rename(hhid = HHID)\n\n# Add the identifiers to the data\nsample_hces <- dplyr::left_join(sample_hces, household_identifiers, by = c(\"hhid\", \"case_id\"))\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nCreate a measure id column\nThe create_measure_id function creates a measure id column that is used to identify the consumption measure of each food item. The function takes in a data frame and the name of the column that contains the consumption information. The function also takes in the value that indicates that the food item was consumed.\n\n# Create measure id column\nsample_hces <- create_measure_id(sample_hces, country = \"MWI\", survey = \"IHS5\", cols = c(\"region\", \"matched_cons_unit_code\", \"matched_food_code\"), include_ISOs = FALSE)\n\nsample_hces |>\n  head(5) |>\n  knitr::kable()\n\n\n\nImport food conversion factors.\nThe available data comes with a `food_conversion fcators file which has conversion fcators that link the food names and units to their corresponding\n\n# Import food conversion factors file\nIHS5_conv_fct <- readr::read_csv(here::here(\"data-ignore\",\"IHS5\",\"ihs5factors_clean.csv\"))\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Remane columns for consistency\nIHS5_conv_fct <- dplyr::rename(IHS5_conv_fct, food_item_code = item_code, food_item_name = item_name)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Clean the food names and codes to match those in the IHS5 data\nIHS5_conv_fct <- concatenate_columns(IHS5_conv_fct, c(\"unit_name\",\"Otherunit\"), \"SPECIFY\", \"unit_name\", FALSE) \n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Match food names and codes to those in the IHS5 data\nIHS5_conv_fct <- match_food_names_v2(IHS5_conv_fct, country=\"MWI\", survey=\"IHS5\", food_name_col=\"food_item_name\", food_code_col=\"food_item_code\", matches_csv = NULL, overwrite = TRUE)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Match the food unit names and codes to those in the IHS5 data\nIHS5_conv_fct <- match_food_units_v2(IHS5_conv_fct, country=\"MWI\", survey=\"IHS5\", unit_name_col=\"unit_name\", unit_code_col=\"unit_code\", matches_csv = NULL, overwrite = TRUE)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\n\n# Create a measure id column\nIHS5_conv_fct <- create_measure_id(IHS5_conv_fct, country = \"MWI\", survey = \"IHS5\", cols = c(\"region\", \"matched_unit_code\", \"matched_food_code\"), include_ISOs = FALSE)\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\nIHS5_conv_fct |>\nhead(10)|>\nknitr::kable()\n\nCheck if the conversion factors file contain all the expected conversion factors for the hces data being processed.\n\n# Check conversion factors \ncheck_conv_fct(hces_df = sample_hces, conv_fct_df = IHS5_conv_fct) \n\nCalculate weight of food items in kilograms.\n\nsample_hces <- apply_wght_conv_fct(hces_df =sample_hces, conv_fct_df=IHS5_conv_fct,factor_col = \"factor\",measure_id_col = \"measure_id\",wt_kg_col = \"wt_kg\",cons_qnty_col = \"cons_quant\", allowDuplicates = TRUE)\n\nsample_hces |>\nhead(10)|>\nknitr::kable()"
  },
  {
    "objectID": "hcesNutR.html#assumptions",
    "href": "hcesNutR.html#assumptions",
    "title": "3  Reporting bugs",
    "section": "Assumptions",
    "text": "Assumptions\nMerge HH demographic data with AME/AFE factors Men’s weight: 65kg (assumption) Women’s weight: 55kg (from DHS) PAL: 1.6X the BMR"
  },
  {
    "objectID": "hcesNutR.html#import-data-required",
    "href": "hcesNutR.html#import-data-required",
    "title": "3  Reporting bugs",
    "section": "Import data required",
    "text": "Import data required\nIn order to calculate the AFE and AME metrics we require the following data: - Household roster with the sex and age of each individual - Household health - AFE and AME factors\n\n# Import data of the roster and health modules of the IHS5 survey\nihs5_roster <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_B.dta\"))\nihs5_health <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_D.dta\"))\n\n# Import data of the AME/AFE factors and specifications\name_factors <- read.csv(here::here(\"data-ignore\", \"IHS5\", \"ihs5.ame.factors.csv\")) |>\n    janitor::clean_names()\n\name_spec_factors <- read.csv(here::here(\"data-ignore\", \"IHS5\", \"ihs5.ame.spec.csv\")) |>\n    janitor::clean_names() |>\n    # Rename the population column to cat and select the relevant columns\n    dplyr::rename(cat = population) |>\n    dplyr::select(cat, ame_spec, afe_spec)"
  },
  {
    "objectID": "hcesNutR.html#extra-energy-requirements-for-pregnancy",
    "href": "hcesNutR.html#extra-energy-requirements-for-pregnancy",
    "title": "3  Reporting bugs",
    "section": "Extra energy requirements for pregnancy",
    "text": "Extra energy requirements for pregnancy\n\n# # Extra energy requirements for pregnancy and Illness\npregnantPersons <- ihs5_health |>\n    dplyr::filter(hh_d05a == 28 | hh_d05b == 28) |> # NOTE: 28 is the code for pregnancy in this survey\n    dplyr::mutate(ame_preg = 0.11, afe_preg = 0.14) |> # NOTE: where do these values come from, DHS?\n    dplyr::select(HHID, ame_preg, afe_preg)\n\n# Preview\npregnantPersons |>\n    head() |>\n    knitr::kable()"
  }
]