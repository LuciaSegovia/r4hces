[
  {
    "objectID": "fct_standardisation.html",
    "href": "fct_standardisation.html",
    "title": "8  Food Composition Table & Databases: Standardisation",
    "section": "",
    "text": "9 Creating the food_group variable in the FCT"
  },
  {
    "objectID": "fct_standardisation.html#introduction",
    "href": "fct_standardisation.html#introduction",
    "title": "8  Food Composition Table & Databases: Standardisation",
    "section": "8.1 Introduction",
    "text": "8.1 Introduction\n\n\n8.1.1 Selecting food composition data\nWhen selecting the food composition table or database (FCT) that will be used, it is good to reflect on the following questions:\n\nRelevancy for the study/context (e.g., is that FCT/FCBD geographically and culturally close to our survey scope?).\nFCT availability & missing values (e.g., are relevant foods and nutrients reported?).\nData quality and reporting (e.g., what are the method of analysis and metadata available?).\n\n\n\n8.1.2 Objective\nThis document provide, together with the template document, the steps and description for cleaning and standardising FCTs from diverse sources. More details about the cleaned data that can be found in the repository is documented in this folder (documentation).\nFor easy navigation and use of this script it is recommended to use Rstudio. In RStudio please click the “Show Document Outline” button to the right of the source button, at the top right of this window. This will allow for easier navigation of the script.\n\n\n8.1.3 Environment Prep\nFirst we need to check what (Section 4.2) are installed. If you have run this template before in this RStudio project and are sure these packages are already installed, you can comment out (put a hash at the start of) line 20, and skip it.\n\n# Run this to clean the environment\nrm(list = ls())\n\n# Loading libraries\n\nlibrary(readxl) # reading and writing excel files\nlibrary(stringr) # character string handling\nlibrary(dplyr) # cleaning data\nlibrary(here) # file management"
  },
  {
    "objectID": "fct_standardisation.html#obtaining-the-raw-fct-file",
    "href": "fct_standardisation.html#obtaining-the-raw-fct-file",
    "title": "8  Food Composition Table & Databases: Standardisation",
    "section": "8.2 Obtaining the raw (FCT) file",
    "text": "8.2 Obtaining the raw (FCT) file\n\n8.2.1 Data license\nBefore using any dataset, we recommend to check licensing conditions & record the data source, you can use the README template.\n\n\n8.2.2 Downloading the data\nIf the data is publicly available online, usually you only need to run the code below to obtain the raw files. Remember you only need to do it the first time! Then, the data will be stored in the folder of your choice (see below).\nFor instance, many raw files can be found provided by the FAO here, in various formats.\nOnce the link to the data is found, check what file type it is, and paste the direct file link to replace the fill-in value below.\n\n\n8.2.3 File names conventions\nWe advise to use the ISO code (2 digits) (see ISO 3166 2-alpha code for further information) of the country or the region of the FCT scope, plus the two last digits of the year of publication to name, both the folder which will contain the data and the scripts related to the FCT. For instance, Western Africa FCT, 2019 will be coded as WA19. This will help with the interoperability, reusability and findability of the data. Also, to streamline the work in the future. That name convention will be used also as the identifier of the FCT.\nNote that you need to create the folders to store the FCT.\n\nf <- \"https://www.fao.org/fileadmin/user_upload/faoweb/2020/WAFCT_2019.xlsx\"\n \n download.file(f, \n             destfile = here::here(\"data\", # data folder\n                                   'WA19', #FCT folder\n                                   #FCT file\n                                   \"WAFCT_2019.xlsx\"),  \n             method=\"wininet\", #use \"curl\" for OS X / Linux, \"wininet\" for Windows\n             mode=\"wb\")\n\nIf using an RStudio project, and you put the .R file and the data file in the same folder as the RStudio project or within a subfolder, files and folders are much easier to navigate as your project/here::here location automatically moves to the main project folder.\n\n\n8.2.4 Getting your file into R\nIf you are using an RStudio project but used a different download method, or already have the file you want to process on your computer, or are using base R we can still use the here::here() function, however we will have to find the file first.\nThe best practice is to put the file in the same folder as this script, or in a folder within the project. If this is done, then use here::here() to find your current working directory, and then navigate to the file’s folder. More information about the here package can be found here.\n\n# Run this script to see where is your directory\nhere::here()\n\nIn order to navigate R to the file, you have to include each subfolder between the here::here() location and the file itself. So for our file structure, we have the ‘data’ folder, the ‘FCT’ folder and the FCT file).\nFind your file in your project, and then direct here::here() to it.\n\n# This identifies the file and file path, and saves it as a variable\nFCT_file_location <- here::here('data','WA19', \"WAFCT_2019.xlsx\")"
  },
  {
    "objectID": "fct_standardisation.html#importing-the-data-loading-the-data",
    "href": "fct_standardisation.html#importing-the-data-loading-the-data",
    "title": "8  Food Composition Table & Databases: Standardisation",
    "section": "8.3 Importing the data (loading the data)",
    "text": "8.3 Importing the data (loading the data)\n\n8.3.1 Importing Files\nAfter having found the file on your system that we want to import it. FCT files come in many different forms - the most common being “.xlsx” files and “.csv” files. Methods to import both of these file types will be covered - please navigate to the relevant subsection.\nDuring import, a identifier for the FCT is created and added to the table. Please replace ‘WA19’ from the next code chunck with the FCT id., comprised of the countries ISO 3166 2-alpha code, and the year the FCT was produced (e.g. for the Western Africa FCT from 2019, the reference would be ‘MWA9’).\nThis should be the same as the folder name explained in (section 1.3)[link-to-section].\n\n# This is an example of the name \nFCT_id <- 'WA19' # Change two first letter for your ISO 2 code & the two digits for the last two digits of the year of publication.\n\nIf you used the download method above Section 8.2.2 then we will see the same location as specified there to specify the file. We can simply use the object FCT_file_location, or copy the contents inside the here::here() and use it to fill the here::here() in the line of code below.\n\nImporting .xlsx files\nFor the spreadsheet (excel-type of files), first, you need to check what information is provided and which of the sheet is providing the FC data.\n\n# Checking the sheets\n\nreadxl::excel_sheets(FCT_file_location)\n\ndata.df <- readxl::read_excel(FCT_file_location, #The file location, as                            identified in section 2.1\n                              sheet = 5  # Change to the excel sheet where                              the FCT is stored in the excel file\n                              ) %>%  \n  mutate(source_fct = FCT_id)  #Creates the source_fct column and fills with                 a id for this FCT, as filled in in section 2.2. \n\n\n\nImporting .csv files\n\ndata.df <- read.csv2(FCT_file_location, #The file location, as identified in section 2.1\n                     sep = \",\") %>%  # Replace w/ other symbol if needed\n  mutate(source_fct = FCT_id) #Creates the source_fct column and fills with a id for this FCT, as filled in in section 2.2. \n\nOnce imported, it is important to check the data.frame created from the csv, by using head(data.df) or clicking on its entry in the Environment panel of RStudio (This second option is not advised with very large files, however, as it can be slow).\nIf the data shown by doing this has all its columns combined, with a symbol in-between, then that symbol (e.g. ‘;’) is the separator for that csv. Replace comma in the sep = \",\" line from the code block above with the new symbol, and run the entire block again.\n\n\nVisually checking the data\n\n# Checking the dataframe\nhead(data.df) \n\n\n\nChecking the loaded data\n\n\n\n\n\n\nQuestion\n\n\n\nHow many rows & columns have the data?\n\n\nYou can use the function dim() to answer to check the number of rows and column.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndim(data.df) # rows & columns\n\n\n\n\nOther useful functions to evaluate the structure of the data are:\n\n# Structure (variable names, class, etc.)\nstr(data.df)\n\n# Checking the last rows and columns\ntail(data.df) \n\n\n\n\n\n\n\nUsing View()\n\n\n\nThe function View() can be use for opening the dataframe in a tab. However, if the dataset is very very big, it may crash the R session.\n\n\nAfter checking that the correct FCT file have loaded the, then proceed. If not, find the correct file and import it instead."
  },
  {
    "objectID": "fct_standardisation.html#cleaning-tidying-and-standardising-the-data",
    "href": "fct_standardisation.html#cleaning-tidying-and-standardising-the-data",
    "title": "8  Food Composition Table & Databases: Standardisation",
    "section": "8.4 Cleaning (tidying) and standardising the data",
    "text": "8.4 Cleaning (tidying) and standardising the data\n\n8.4.1 Formatting FCT into a tabular format\n\nTrimming dataframe rows\nRunning this will trim down the table to only include the row numbers between x and y - replace x and y with your desired values. If you wanted to include multiple row ranges, that is also possible - use comments to differentiate between different row ranges and individual rows. e.g. if you wanted to include rows a:b, row c, row e, and rows g:x, then the code would be slice(a:b, c, e, g:x).\n\ndata.df %>% slice(1:5) %>% knitr::kable()\n\n\n\nTrimming dataframe columns\nIf you only wish to include certain columns/nutrients, then you might wish to remove the unnecessary columns to make the dataframe easier to read and manage. This can be done through 2 methods; either by selecting the names of the columns you want to keep, or by selecting the names of the columns you want to remove.\n\n\nKeep specified columns only\nThis method requires creating a list of column names you want to keep - for #example the line below would select the columns ‘Energy_kcal’, ‘Fatg’, ‘Protein_g’, but nothing else. If you wish to trim the columns this way, replace the items in the first line with the column names you want to keep, then run the code block below.\n\n# Storing the variables you want to keep\ncolumns_to_keep <- c('Scientific name', 'Energy\\r\\n(kJ)')\n\n# Selecting the variables\ndata.df %>% select(columns_to_keep) %>% \n  head(5) %>% \n  knitr::kable()\n\n\n\nRemove specified columns, keep all others\nSometimes it is easier to list the columns you want to remove, rather than the ones you want to keep. The code block below identifies the columns to be removed (‘VitB12_mcg’ and ‘Calcium_mg’ in the example), and then removes them. If you wish to trim the columns this way, replace the items in the first line with the column names you want to remove, then run the code block below.\nThis works in a similar way to the codeblock in section 3.3.1, however by putting an exclamation mark (!) before the list of columns, it inverts the selection - instead of instructing R to keep only the listed columns (as with the codeblock above), it instructs R to keep all columns but the listed ones.\n\n# Selecting the variables that you don't want to keep\ncolumns_to_remove <- c('Food name in French', 'Sum of proximate components\\r\\n(g)') \n\ndata.df %>% select(!columns_to_remove) %>% \n  head(5) %>% \n  knitr::kable()\n\n\n\n\n8.4.2 Creating food groups variable\nSome food composition tables reported food groups that were placed as the first row of each category, however that it is not a data structure that can be used, as we need one column per variable. Hence, the food group names are extracted from the rows, and are allocated as a new attribute of each food (e.g., fish and fishery products to catfish). The food groups are stored in a new column (food_group).\nThis process requires multiple steps, each covered in their own subsections below: Extracting food group names, Creating the variable, and checking changes in the structure.\n\nExtracting food group names\n\n#Creates a list of the food groups using their unique row structure in the table to identify them\n\nfgroup <- data.df %>% \n  filter(is.na(`Food name in English`), !is.na(Code)) %>%\n  pull(Code) %>%\n  stringr::str_split_fixed( '/', n = 2) %>% \n  as_tibble() %>%\n  pull(V1) \n\ngroup.id <-  unique(str_extract(data.df$Code, \"^[:digit:]{2}\\\\_\"))[-1]"
  },
  {
    "objectID": "fct_standardisation.html#further-readings",
    "href": "fct_standardisation.html#further-readings",
    "title": "8  Food Composition Table & Databases: Standardisation",
    "section": "9.1 Further readings",
    "text": "9.1 Further readings\n\nCharrondiere, U.R., Stadlmayr, B., Grande, F., Vincent, A., Oseredczuk, M., Sivakumaran, S., Puwastien, P., Judprasong, K., Haytowitz, D., Gnagnarella, P. 2023. FAO/INFOODS Evaluation framework to assess the quality of published food composition tables and databases - User guide. Rome, FAO. https://doi.org/10.4060/cc5371en"
  },
  {
    "objectID": "fct_harmonisation.html#introduction",
    "href": "fct_harmonisation.html#introduction",
    "title": "9  Food composition harmonisation and food matching",
    "section": "9.1 Introduction",
    "text": "9.1 Introduction\n\n9.1.1 Food matching\nAfter the FCTs are standardised and harmonised and the food list (i.e., food reported as consumed in the Integrated Household Survey, Wave 5, 2019-2020), we can proceed to match them together. To do so, we are using a standardised list of foods that we called “food dictionary”. As depicted in the ?fig-matching."
  },
  {
    "objectID": "fct_harmonisation.html#harmonising-the-food-composition-tables",
    "href": "fct_harmonisation.html#harmonising-the-food-composition-tables",
    "title": "9  Food composition harmonisation and food matching",
    "section": "9.2 Harmonising the Food Composition Tables",
    "text": "9.2 Harmonising the Food Composition Tables\nWhen all the FCTs are standardised, we can use them all together, which is particularly useful when food items and/or nutrient values are missing in the main FCT, then a similar food item could be found in another FCT."
  },
  {
    "objectID": "fct_harmonisation.html#getting-the-nutrition-tools",
    "href": "fct_harmonisation.html#getting-the-nutrition-tools",
    "title": "9  Food composition harmonisation and food matching",
    "section": "9.3 Getting the Nutrition Tools",
    "text": "9.3 Getting the Nutrition Tools\nNutritionTools is an R package of functions to help with a wide range of calculations and processes that commonly occur when working with nutrition datasets. More information can be found here.\n\nif (!require(\"devtools\")) {\n  install.packages(\"devtools\")\n}\ndevtools::install_github(\"TomCodd/NutritionTools\")\n\n\n9.3.1 Food composition functions\nThere are some useful functions that can be downloaded here, and are currently being checked to be added to the NutritionTool package. Those can be loaded into the R environment by running the functions.R script.\n\n# We also need to import some custom functions in another script:\nsource(here::here(\"functions.R\")) # Loading nutrition functions\n\nThe function source() will run the called script."
  },
  {
    "objectID": "fct_harmonisation.html#getting-the-fc-standardarised-dataset",
    "href": "fct_harmonisation.html#getting-the-fc-standardarised-dataset",
    "title": "9  Food composition harmonisation and food matching",
    "section": "9.4 Getting the FC Standardarised dataset",
    "text": "9.4 Getting the FC Standardarised dataset\nDownload the following folders: KE18 & WA19 from this GitHub repository. Eventually, you could download all of them an create a unique FC library.\nEach folder has one script with the FCT id followed by *“_FCT_FAO_Tags”*, and a README file.\n\n# Finding the list of FCTs/FCDBs script in the data folder\n\nlist.files(\"data/\", pattern = \"*_FCT_FAO_Tags\", recursive=FALSE, # so it is not looking into the subfolders\n           full.names=TRUE)\n\nThe next block of code will download and standardise each individual FCT. Then, the FCTs are merged into a common FC library that can be used for food matching.\n\n# Getting the list of FCTs/FCDBs script in the data folder\nsource_fct_name <- list.files(\"data/\", pattern = \"*_FCT_FAO_Tags.R\", recursive=FALSE, # so it is not looking into the subfolders\n           full.names=TRUE)\n\nfor(i in source_fct_name){\n  source(here::here(i))\n}\n\n\n9.4.1 Merging the data\nChecking the FCT we have in our data folder\n\n# finding all the cleaned FCTs/FCDBs from the output folder\nlist.files(\"data/\", pattern = \"*_FCT_FAO_Tags\", recursive=FALSE, # so it is not looking into the subfolders.\n           full.names=TRUE)\n\nNow, we can merge all the FCTs/FCBDs into one file. Note that this is posible because they all have been standardised previously.\n\n# finding all the cleaned FCTs/FCDBs from the output folder\nlist.files(\"data/\", pattern = \"*_FCT_FAO_Tags\", recursive=FALSE, # so it is not taking the fcts in the folder\n           full.names=TRUE)%>% \n  map_df(~read_csv(., col_types = cols(.default = \"c\"), \n                   locale = locale(encoding = \"Latin1\"))) \n\nWe can check that all FCTs that we are expected are there, by using the source_fct variable that is generated within the standardisation scripts, and the number of foods in each one.\n\n#checking that all FCTs are loaded and \n# counting No. of items \n\ndata.df %>%  \n  count(source_fct)"
  },
  {
    "objectID": "fct_harmonisation.html#food-matching-1",
    "href": "fct_harmonisation.html#food-matching-1",
    "title": "9  Food composition harmonisation and food matching",
    "section": "9.5 Food matching",
    "text": "9.5 Food matching\nFirst, we need the list of unique foods reported as consumed. In HCES dataset, this is frequently presented as set of standard list of foods. We are also interested in knowing the frequency with each food is reported, and hence their impact and importance for subsequent analysis.\n\n# Read, subset and rename the data\nihs5_consumption <-\n    read_dta(here::here(\"data\", \"mwi-ihs5-sample-data\", \"HH_MOD_G1_vMAPS.dta\")) |>\n    select(\n        case_id,\n        HHID,\n        hh_g01,\n        hh_g01_oth,\n        hh_g02,\n        hh_g03a,\n        hh_g03b,\n        hh_g03b_label,\n        hh_g03b_oth,\n        hh_g03c,\n        hh_g03c_1\n    ) %>%\n    rename(\n        consumedYN = hh_g01,\n        food_item = hh_g02,\n        food_item_other = hh_g01_oth,\n        consumption_quantity = hh_g03a,\n        consumption_unit = hh_g03b,\n        consumption_unit_label = hh_g03b_label,\n        consumption_unit_oth = hh_g03b_oth,\n        consumption_subunit_1 = hh_g03c,\n        consumption_subunit_2 = hh_g03c_1\n    )\n\n\n# Getting the food item list\n\nihs5_consumption <- hcesNutR::create_dta_labels(ihs5_consumption)\n\n\n# Getting the food list & frequency of HH\n\nfood_list <- ihs5_consumption %>%\n  count(food_item_code, food_item_name)\n\nThen, we will match those food items with their corresponding food dictionary code(s). There are instances were the matching will be one food reported to many foods in the FCT. For example, wheat flour will be matched to wheat flour refined, and wheat flour wholemeal.\n\n# Food dictionary\ndictionary <- read.csv(\"https://raw.github.com/LuciaSegovia/fct/repro/metadata/MAPS_food-dictionary_v3.0.3.csv\")\n\nThen, the unique food dictionary codes (ID_3) will be used to match the food in the food list to the FCTs.\n\n# Matching \n\nihs5 <- read.csv(here::here(\"data\", \"fct_ihs5_v2.2.csv\"))\n\n\n\n\n\n\n\nActivity:\n\n\n\nThinking about food matches between HCES food list and food composition.\n\nDo you think that the food matches selected represents well what the food reported as consumed in the survey?\nIf not, what other foods would you add/remove/change to?\nFor the foods without matches, can you think of what food items you would use?\nCould you identify any food matches in the Food Composition Library that will be a good match for those foods that have no matches?\nWhat nutrients are important for each of the foods selected?"
  },
  {
    "objectID": "fct_harmonisation.html#dealing-with-missing-values",
    "href": "fct_harmonisation.html#dealing-with-missing-values",
    "title": "9  Food composition harmonisation and food matching",
    "section": "9.6 Dealing with missing values",
    "text": "9.6 Dealing with missing values\n\n9.6.1 Combining Tagnames to generate variables\n\n\n9.6.2 Re-calculating variables\nSome varibles need to be recalculated, as part of the harmonisation process and also for quality assurance. One case is Energy (kcal/kJ) which is calculated from the proximate: Protein, Fat, available Carbohydrates, Fibre and Alcohol. Hence, we need to make sure that all these variables are reported and are completed. For instance, if there were missing values in Fat content, that the combination of Tagnames have been performed. In addition, if we are using Carbohydrate by difference, then we should re-calculate that variable as well.\n\n# Re-calculate variables:\ndata.df %>% \n  # Calculate available Carbohydrates, by difference\n  CHOAVLDFg_std_creator() %>%  \n  # Calculate Energy (kcal)\n  ENERCKcal_standardised() %>% \n  # calculate Energy (kJ)\n  ENERCKj_standardised() \n\nAnother similar example is Vitamin A (RE/RAE), which is calculated from retinol and the carotenoids (i.e., Beta-carotene equivalents). Similarly, we need to check that those two variables. Note, that beta-carotene eq. is also re-calculated, when possible, from the carotenids and their conversion factors. Hence, first we should check that beta-carotene, alpha-carotene, and beta-crypoxanthin are available.\n\n# Re-calculate variables:\ndata.df %>% \n# Recalculate beta-carotene eq.\n    CARTBEQmcg_std_creator() %>% \n# Recalculate Vitamin A (RAE)\n   VITA_RAEmcg_std_creator() %>%  \n# Recalculate Vitamin A (RE)\n    VITAmcg_std_creator()\n\n\n\n9.6.3 Further Readings\n\n\nGreenfield, Heather, and D. A. T. Southgate. Food Composition Data: Production, Management, and Use. Rome: FAO, 2003.\nFAO/INFOODS (2012). FAO/INFOODS Guidelines for Checking Food Composition Data Prior to the Publication of a User Table/Database-Version 1.0. FAO, Rome’. Accessed 22 January 2022. https://www.fao.org/3/ap810e/ap810e.pdf."
  },
  {
    "objectID": "sample_data.html#introduction",
    "href": "sample_data.html#introduction",
    "title": "10  Appendix A: Sample Data",
    "section": "10.1 Introduction",
    "text": "10.1 Introduction\nThe sample data used in this book was generated from the Malawi Intergrated Household Survey Fifth Edition 2018-2019 downloaded from here.\nThe data was generated randomly using the following code:"
  },
  {
    "objectID": "sample_data.html#define-functions-used",
    "href": "sample_data.html#define-functions-used",
    "title": "10  Appendix A: Sample Data",
    "section": "10.2 Define functions used",
    "text": "10.2 Define functions used\n\n10.2.1 Create case_id generation\n\ngenerate_case_ids <- function(n) {\n    start_id <- 201011000001\n    end_id <- start_id + n-1\n    case_ids <- as.character(seq(start_id, end_id, by = 1))\n    return(case_ids)\n}\n\n\n\n10.2.2 Create HHID generation function\n\ngenerate_HHIDs <- function(n) {\n  hhids <- sapply(1:n, function(x) {\n    paste(sample(c(0:9, letters[1:6]), 32, replace = TRUE), collapse = \"\")\n  })\n  return(hhids)\n}"
  },
  {
    "objectID": "sample_data.html#set-seed-and-number-of-households-to-generate",
    "href": "sample_data.html#set-seed-and-number-of-households-to-generate",
    "title": "10  Appendix A: Sample Data",
    "section": "10.3 Set seed and number of households to generate",
    "text": "10.3 Set seed and number of households to generate\n\n# Set seed\nset.seed(123)\n# Set number of households to generate\nhouseholds <- 100"
  },
  {
    "objectID": "sample_data.html#load-original-data-and-extract-food-and-unit-lists",
    "href": "sample_data.html#load-original-data-and-extract-food-and-unit-lists",
    "title": "10  Appendix A: Sample Data",
    "section": "10.4 Load Original data and extract food and unit lists",
    "text": "10.4 Load Original data and extract food and unit lists\n\n# Import Malawi IHS5 HCES consumption module data\noriginal_data <-\n  haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_G1.dta\"))\n\n# Extract \"standard\" food list from the original data\nfood_list <-\n  original_data |> \n  dplyr::select(hh_g02) |> \n  dplyr::distinct()\n\n# Extract \"non-standard\" food lists from the original data\nother_food_list_codes <-\n  original_data |> \n  dplyr::distinct(hh_g02, hh_g01_oth) |> \n  dplyr::filter(hh_g01_oth != \"\") |> \n  dplyr::distinct(hh_g02) |> \n  dplyr::arrange()\nother_food_list_options <-\n  original_data |> \n  dplyr::distinct(hh_g02, hh_g01_oth) |> \n  dplyr::filter(hh_g01_oth != \"\")\n\n# Extract Food unit lists from the original data\nfood_unit_lists <-\n  original_data |> \n  dplyr::distinct(hh_g03b, hh_g03b_label, hh_g03b_oth, hh_g03c, hh_g03c_1)\n\n# Extract the length of Number of foods from the food list\nn_foods <- length(food_list$hh_g02)"
  },
  {
    "objectID": "sample_data.html#data-creation",
    "href": "sample_data.html#data-creation",
    "title": "10  Appendix A: Sample Data",
    "section": "10.5 Data creation",
    "text": "10.5 Data creation\n\n10.5.1 Create HHIDs\n\n# Creeate case_ids\ncase_id <- generate_case_ids(households)\n# Generate HHIDs\nhhids <- generate_HHIDs(households)\n\n\n\n10.5.2 Create data\n\nsample_data <- tibble::tibble(\n  case_id = rep(case_id, each = n_foods),\n  HHID = rep(hhids, each = n_foods),\n      hh_g00_1 = 2,\n    hh_g00_2 = 2,\n  food_list |> dplyr::slice(rep(1:dplyr::n(), households)),\n      hh_g01 = sample(\n      original_data$hh_g01,\n      # replace = T,\n      size = households * 142\n    )\n  ) |>\n\n# Add \"other food items\"\n\n  dplyr::rowwise() |>\n  dplyr::mutate(\n    hh_g01_oth = dplyr::case_when(\n      hh_g02 == 414 &\n        hh_g01 == 1 ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 414) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 515 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 515) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 117 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 117) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 830 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 830) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 310 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 310) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 412 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 412) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 610 &\n        hh_g01 == 1  ~ sample(\n         dplyr::filter( other_food_list_options,hh_g02 == 610) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 916 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 916) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 209 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 209) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 709 &\n        hh_g01 == 1  ~ sample(\n          dplyr::filter(other_food_list_options,hh_g02 == 709) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 818 &\n        hh_g01 == 1  ~ sample(\n           dplyr::filter(other_food_list_options,hh_g02 == 818) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      hh_g02 == 804 &\n        hh_g01 == 1  ~ sample(dplyr::filter(other_food_list_options,hh_g02 == 804) |> dplyr::pull(hh_g01_oth),\n          1\n        ),\n      TRUE ~ \"\"\n    )\n  ) |>\n  dplyr::mutate(hh_g03a = dplyr::case_when(hh_g01 == 1 ~ sample(c(1:10, 0.5:10), 1),\n                                           TRUE ~ NA)) |>\n  dplyr::rowwise() |>\n  dplyr::mutate(unit_key = dplyr::case_when(hh_g01 == 1 ~ sample(1:214, 1), TRUE ~\n                                              NA)) |>\n  dplyr::mutate(\n    hh_g03b = food_unit_lists$hh_g03b[unit_key],\n    hh_g03b_label = food_unit_lists$hh_g03b_label[unit_key],\n    hh_g03b_oth = food_unit_lists$hh_g03b_oth[unit_key],\n    hh_g03c = food_unit_lists$hh_g03c[unit_key],\n    hh_g03c_1 = food_unit_lists$hh_g03c_1[unit_key]\n  ) |>\n  dplyr::select(\n    -unit_key,\n    \"case_id\",\n    \"HHID\",\n    \"hh_g00_1\",\n    \"hh_g00_2\",\n    \"hh_g01\",\n    \"hh_g01_oth\",\n    \"hh_g02\",\n    \"hh_g03a\",\n    \"hh_g03b\",\n    \"hh_g03b_label\",\n    \"hh_g03b_oth\",\n    \"hh_g03c\",\n    \"hh_g03c_1\"\n  ) \n\n\n# Add the rest of the columns\nsample_data <- original_data |> dplyr::filter(is.na(case_id)) |> \ndplyr::bind_rows(sample_data)\n\n\n# Attach stata column labels\nfor (i in names(sample_data)){\n  attr(sample_data[[i]], \"label\") <- attr(original_data[[i]], \"label\")\n}\n\n\n# Export sample data as stata file\nhaven::write_dta(sample_data,here::here(\"data\",\"sample_data\",\"MWI-IHSV\",\"HH_MOD_G1_vMAPS.dta\"))\n\n\n\n10.5.3 Create hh_mod_a_filt.dta file\n\nsample_data |> \ndplyr::select(case_id,HHID) |> \ndplyr::distinct() |> \ndplyr::rowwise() |>\ndplyr::mutate(region = sample(1:3,1)) |> \nhaven::write_dta(here::here(\"data\",\"sample_data\",\"MWI-IHSV\",\"hh_mod_a_filt_vMAPS.dta\"))\n\n\n\n10.5.4 Create hh_roster.dta\n\n# Import original roster from IHS5\nihs5_roster <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_B.dta\"))\n\n# create a dataframe with the case_ids and HHIDs of our sample data\nsample_roster <- sample_data |> dplyr::distinct(case_id,HHID)\n\n# replicate each row a random number of times between 1 and 10 to simulate household members\nn <- sample(1:10, nrow(sample_roster), replace = TRUE)\nsample_roster <- sample_roster[rep(seq_len(nrow(sample_roster)), times = n), ]\n\n# Create other variables\nsample_roster <- sample_roster |> \ndplyr::rowwise() |>\ndplyr::mutate(hh_b03 = sample(ihs5_roster$hh_b03,1),\nhh_b05a = sample(ihs5_roster$hh_b05a,1),\nhh_b05b = dplyr::case_when(hh_b05a < 5~sample(1:11,1),TRUE~NA))\n\n# Add the other blank columns from the original dataset\nsample_roster <- ihs5_roster |>\ndplyr::filter(case_id == \"\") |>\ndplyr::bind_rows(sample_roster)\n\n# Attach stata column labels\nfor (i in names(sample_roster)){\n  attr(sample_roster[[i]], \"label\") <- attr(ihs5_roster[[i]], \"label\")\n}\n\n# writeout the sample_ihs5_roster\nhaven::write_dta(sample_roster,here::here(\"data\",\"sample_data\",\"MWI-IHSV\",\"HH_MOD_B_vMAPS.dta\"))\n\n\n\n10.5.5 Create sample “HH_MOD_D.dta”\n\n# import original data\noriginal_health <- haven::read_dta(here::here(\"data-ignore\", \"IHS5\", \"HH_MOD_D.dta\"))\n\n# Use the sample_roster to create a sample_health dataset\nsample_health <- sample_roster |>\ndplyr::select(case_id,HHID) |>\ndplyr::rowwise()|>\ndplyr::mutate(hh_d05a = sample(c(original_health$hh_d05a),1),\nhh_d05b = sample(original_health$hh_d05b,1))\n\n# Add the other blank columns from the original dataset\nsample_health <- original_health |>\ndplyr::filter(case_id == \"\") |>\ndplyr::bind_rows(sample_health)\n\n# Attach stata column labels\nfor (i in names(sample_health)){\n  attr(sample_health[[i]], \"label\") <- attr(sample_health[[i]], \"label\")\n}\n\n# writeout the sample_ihs5_roster\nhaven::write_dta(sample_health,here::here(\"data\",\"sample_data\",\"MWI-IHSV\",\"HH_MOD_D_vMAPS.dta\"))"
  },
  {
    "objectID": "data_visualisation.html#plots-and-graphs",
    "href": "data_visualisation.html#plots-and-graphs",
    "title": "6  Data Visualisation",
    "section": "6.1 Plots and Graphs",
    "text": "6.1 Plots and Graphs\nThe objective of this section is to provide information on the topic under consideration, along with examples and exercises. You should be able to work through it in R studio. This section requires some packages to be loaded.\n\n# Loading libraries\n\nlibrary(ggplot2) # data visualisation\nlibrary(dplyr) # data manipulation\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nTo demonstrate the visuals, let us load a dataframe called ihs5_consumption which was generated in{Chapter 5}.\n\n# Loading the data\n\nihs5_consumption <- read.csv(here::here(\"data\", \"ihs5_consumption.csv\")) %>% \n  mutate(region = as.factor(region))\n\nThis dataframe contains 36 variables, of which we will be focusing on food_item, consumption_per_person, and region.\nThe specific objective of the material in this script is to introduce you to different graphic used in R. By the end you should have a better understanding of some basic concepts regarding data visualisation, and should be better-placed to start developing and editing scripts yourself. The particular topics we shall cover are:\n\nUnivariate graphs\nMultivariate graphs\nControlling layout\nPrinting graphs"
  },
  {
    "objectID": "data_visualisation.html#univariate-graphs",
    "href": "data_visualisation.html#univariate-graphs",
    "title": "6  Data Visualisation",
    "section": "6.2 Univariate graphs",
    "text": "6.2 Univariate graphs\nIn this section, we look at graphics that we may create with a single variable. This includes histograms, boxplots, bar charts, as well as QQ plots. These are usually important in checking the distribution of variables in your dataset or checking the residuals of a fitted model.\n\n6.2.1 Histogram\n\n# Generating the base for the plot\n\nihs5_consumption %>% \n  ggplot()\n\n\n\n\n\n# Creating the histogram\n\nihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nChanging colour of a histogram\n\n\n\n\n\n\nColour names (click to expand)\n\n\n\n\n\nThis is done by adding argument fill =\"color\". There are various options of colors that can be used. You can check the various options of colors you can use by typing colors().\n\ncolors()\n\n  [1] \"white\"                \"aliceblue\"            \"antiquewhite\"        \n  [4] \"antiquewhite1\"        \"antiquewhite2\"        \"antiquewhite3\"       \n  [7] \"antiquewhite4\"        \"aquamarine\"           \"aquamarine1\"         \n [10] \"aquamarine2\"          \"aquamarine3\"          \"aquamarine4\"         \n [13] \"azure\"                \"azure1\"               \"azure2\"              \n [16] \"azure3\"               \"azure4\"               \"beige\"               \n [19] \"bisque\"               \"bisque1\"              \"bisque2\"             \n [22] \"bisque3\"              \"bisque4\"              \"black\"               \n [25] \"blanchedalmond\"       \"blue\"                 \"blue1\"               \n [28] \"blue2\"                \"blue3\"                \"blue4\"               \n [31] \"blueviolet\"           \"brown\"                \"brown1\"              \n [34] \"brown2\"               \"brown3\"               \"brown4\"              \n [37] \"burlywood\"            \"burlywood1\"           \"burlywood2\"          \n [40] \"burlywood3\"           \"burlywood4\"           \"cadetblue\"           \n [43] \"cadetblue1\"           \"cadetblue2\"           \"cadetblue3\"          \n [46] \"cadetblue4\"           \"chartreuse\"           \"chartreuse1\"         \n [49] \"chartreuse2\"          \"chartreuse3\"          \"chartreuse4\"         \n [52] \"chocolate\"            \"chocolate1\"           \"chocolate2\"          \n [55] \"chocolate3\"           \"chocolate4\"           \"coral\"               \n [58] \"coral1\"               \"coral2\"               \"coral3\"              \n [61] \"coral4\"               \"cornflowerblue\"       \"cornsilk\"            \n [64] \"cornsilk1\"            \"cornsilk2\"            \"cornsilk3\"           \n [67] \"cornsilk4\"            \"cyan\"                 \"cyan1\"               \n [70] \"cyan2\"                \"cyan3\"                \"cyan4\"               \n [73] \"darkblue\"             \"darkcyan\"             \"darkgoldenrod\"       \n [76] \"darkgoldenrod1\"       \"darkgoldenrod2\"       \"darkgoldenrod3\"      \n [79] \"darkgoldenrod4\"       \"darkgray\"             \"darkgreen\"           \n [82] \"darkgrey\"             \"darkkhaki\"            \"darkmagenta\"         \n [85] \"darkolivegreen\"       \"darkolivegreen1\"      \"darkolivegreen2\"     \n [88] \"darkolivegreen3\"      \"darkolivegreen4\"      \"darkorange\"          \n [91] \"darkorange1\"          \"darkorange2\"          \"darkorange3\"         \n [94] \"darkorange4\"          \"darkorchid\"           \"darkorchid1\"         \n [97] \"darkorchid2\"          \"darkorchid3\"          \"darkorchid4\"         \n[100] \"darkred\"              \"darksalmon\"           \"darkseagreen\"        \n[103] \"darkseagreen1\"        \"darkseagreen2\"        \"darkseagreen3\"       \n[106] \"darkseagreen4\"        \"darkslateblue\"        \"darkslategray\"       \n[109] \"darkslategray1\"       \"darkslategray2\"       \"darkslategray3\"      \n[112] \"darkslategray4\"       \"darkslategrey\"        \"darkturquoise\"       \n[115] \"darkviolet\"           \"deeppink\"             \"deeppink1\"           \n[118] \"deeppink2\"            \"deeppink3\"            \"deeppink4\"           \n[121] \"deepskyblue\"          \"deepskyblue1\"         \"deepskyblue2\"        \n[124] \"deepskyblue3\"         \"deepskyblue4\"         \"dimgray\"             \n[127] \"dimgrey\"              \"dodgerblue\"           \"dodgerblue1\"         \n[130] \"dodgerblue2\"          \"dodgerblue3\"          \"dodgerblue4\"         \n[133] \"firebrick\"            \"firebrick1\"           \"firebrick2\"          \n[136] \"firebrick3\"           \"firebrick4\"           \"floralwhite\"         \n[139] \"forestgreen\"          \"gainsboro\"            \"ghostwhite\"          \n[142] \"gold\"                 \"gold1\"                \"gold2\"               \n[145] \"gold3\"                \"gold4\"                \"goldenrod\"           \n[148] \"goldenrod1\"           \"goldenrod2\"           \"goldenrod3\"          \n[151] \"goldenrod4\"           \"gray\"                 \"gray0\"               \n[154] \"gray1\"                \"gray2\"                \"gray3\"               \n[157] \"gray4\"                \"gray5\"                \"gray6\"               \n[160] \"gray7\"                \"gray8\"                \"gray9\"               \n[163] \"gray10\"               \"gray11\"               \"gray12\"              \n[166] \"gray13\"               \"gray14\"               \"gray15\"              \n[169] \"gray16\"               \"gray17\"               \"gray18\"              \n[172] \"gray19\"               \"gray20\"               \"gray21\"              \n[175] \"gray22\"               \"gray23\"               \"gray24\"              \n[178] \"gray25\"               \"gray26\"               \"gray27\"              \n[181] \"gray28\"               \"gray29\"               \"gray30\"              \n[184] \"gray31\"               \"gray32\"               \"gray33\"              \n[187] \"gray34\"               \"gray35\"               \"gray36\"              \n[190] \"gray37\"               \"gray38\"               \"gray39\"              \n[193] \"gray40\"               \"gray41\"               \"gray42\"              \n[196] \"gray43\"               \"gray44\"               \"gray45\"              \n[199] \"gray46\"               \"gray47\"               \"gray48\"              \n[202] \"gray49\"               \"gray50\"               \"gray51\"              \n[205] \"gray52\"               \"gray53\"               \"gray54\"              \n[208] \"gray55\"               \"gray56\"               \"gray57\"              \n[211] \"gray58\"               \"gray59\"               \"gray60\"              \n[214] \"gray61\"               \"gray62\"               \"gray63\"              \n[217] \"gray64\"               \"gray65\"               \"gray66\"              \n[220] \"gray67\"               \"gray68\"               \"gray69\"              \n[223] \"gray70\"               \"gray71\"               \"gray72\"              \n[226] \"gray73\"               \"gray74\"               \"gray75\"              \n[229] \"gray76\"               \"gray77\"               \"gray78\"              \n[232] \"gray79\"               \"gray80\"               \"gray81\"              \n[235] \"gray82\"               \"gray83\"               \"gray84\"              \n[238] \"gray85\"               \"gray86\"               \"gray87\"              \n[241] \"gray88\"               \"gray89\"               \"gray90\"              \n[244] \"gray91\"               \"gray92\"               \"gray93\"              \n[247] \"gray94\"               \"gray95\"               \"gray96\"              \n[250] \"gray97\"               \"gray98\"               \"gray99\"              \n[253] \"gray100\"              \"green\"                \"green1\"              \n[256] \"green2\"               \"green3\"               \"green4\"              \n[259] \"greenyellow\"          \"grey\"                 \"grey0\"               \n[262] \"grey1\"                \"grey2\"                \"grey3\"               \n[265] \"grey4\"                \"grey5\"                \"grey6\"               \n[268] \"grey7\"                \"grey8\"                \"grey9\"               \n[271] \"grey10\"               \"grey11\"               \"grey12\"              \n[274] \"grey13\"               \"grey14\"               \"grey15\"              \n[277] \"grey16\"               \"grey17\"               \"grey18\"              \n[280] \"grey19\"               \"grey20\"               \"grey21\"              \n[283] \"grey22\"               \"grey23\"               \"grey24\"              \n[286] \"grey25\"               \"grey26\"               \"grey27\"              \n[289] \"grey28\"               \"grey29\"               \"grey30\"              \n[292] \"grey31\"               \"grey32\"               \"grey33\"              \n[295] \"grey34\"               \"grey35\"               \"grey36\"              \n[298] \"grey37\"               \"grey38\"               \"grey39\"              \n[301] \"grey40\"               \"grey41\"               \"grey42\"              \n[304] \"grey43\"               \"grey44\"               \"grey45\"              \n[307] \"grey46\"               \"grey47\"               \"grey48\"              \n[310] \"grey49\"               \"grey50\"               \"grey51\"              \n[313] \"grey52\"               \"grey53\"               \"grey54\"              \n[316] \"grey55\"               \"grey56\"               \"grey57\"              \n[319] \"grey58\"               \"grey59\"               \"grey60\"              \n[322] \"grey61\"               \"grey62\"               \"grey63\"              \n[325] \"grey64\"               \"grey65\"               \"grey66\"              \n[328] \"grey67\"               \"grey68\"               \"grey69\"              \n[331] \"grey70\"               \"grey71\"               \"grey72\"              \n[334] \"grey73\"               \"grey74\"               \"grey75\"              \n[337] \"grey76\"               \"grey77\"               \"grey78\"              \n[340] \"grey79\"               \"grey80\"               \"grey81\"              \n[343] \"grey82\"               \"grey83\"               \"grey84\"              \n[346] \"grey85\"               \"grey86\"               \"grey87\"              \n[349] \"grey88\"               \"grey89\"               \"grey90\"              \n[352] \"grey91\"               \"grey92\"               \"grey93\"              \n[355] \"grey94\"               \"grey95\"               \"grey96\"              \n[358] \"grey97\"               \"grey98\"               \"grey99\"              \n[361] \"grey100\"              \"honeydew\"             \"honeydew1\"           \n[364] \"honeydew2\"            \"honeydew3\"            \"honeydew4\"           \n[367] \"hotpink\"              \"hotpink1\"             \"hotpink2\"            \n[370] \"hotpink3\"             \"hotpink4\"             \"indianred\"           \n[373] \"indianred1\"           \"indianred2\"           \"indianred3\"          \n[376] \"indianred4\"           \"ivory\"                \"ivory1\"              \n[379] \"ivory2\"               \"ivory3\"               \"ivory4\"              \n[382] \"khaki\"                \"khaki1\"               \"khaki2\"              \n[385] \"khaki3\"               \"khaki4\"               \"lavender\"            \n[388] \"lavenderblush\"        \"lavenderblush1\"       \"lavenderblush2\"      \n[391] \"lavenderblush3\"       \"lavenderblush4\"       \"lawngreen\"           \n[394] \"lemonchiffon\"         \"lemonchiffon1\"        \"lemonchiffon2\"       \n[397] \"lemonchiffon3\"        \"lemonchiffon4\"        \"lightblue\"           \n[400] \"lightblue1\"           \"lightblue2\"           \"lightblue3\"          \n[403] \"lightblue4\"           \"lightcoral\"           \"lightcyan\"           \n[406] \"lightcyan1\"           \"lightcyan2\"           \"lightcyan3\"          \n[409] \"lightcyan4\"           \"lightgoldenrod\"       \"lightgoldenrod1\"     \n[412] \"lightgoldenrod2\"      \"lightgoldenrod3\"      \"lightgoldenrod4\"     \n[415] \"lightgoldenrodyellow\" \"lightgray\"            \"lightgreen\"          \n[418] \"lightgrey\"            \"lightpink\"            \"lightpink1\"          \n[421] \"lightpink2\"           \"lightpink3\"           \"lightpink4\"          \n[424] \"lightsalmon\"          \"lightsalmon1\"         \"lightsalmon2\"        \n[427] \"lightsalmon3\"         \"lightsalmon4\"         \"lightseagreen\"       \n[430] \"lightskyblue\"         \"lightskyblue1\"        \"lightskyblue2\"       \n[433] \"lightskyblue3\"        \"lightskyblue4\"        \"lightslateblue\"      \n[436] \"lightslategray\"       \"lightslategrey\"       \"lightsteelblue\"      \n[439] \"lightsteelblue1\"      \"lightsteelblue2\"      \"lightsteelblue3\"     \n[442] \"lightsteelblue4\"      \"lightyellow\"          \"lightyellow1\"        \n[445] \"lightyellow2\"         \"lightyellow3\"         \"lightyellow4\"        \n[448] \"limegreen\"            \"linen\"                \"magenta\"             \n[451] \"magenta1\"             \"magenta2\"             \"magenta3\"            \n[454] \"magenta4\"             \"maroon\"               \"maroon1\"             \n[457] \"maroon2\"              \"maroon3\"              \"maroon4\"             \n[460] \"mediumaquamarine\"     \"mediumblue\"           \"mediumorchid\"        \n[463] \"mediumorchid1\"        \"mediumorchid2\"        \"mediumorchid3\"       \n[466] \"mediumorchid4\"        \"mediumpurple\"         \"mediumpurple1\"       \n[469] \"mediumpurple2\"        \"mediumpurple3\"        \"mediumpurple4\"       \n[472] \"mediumseagreen\"       \"mediumslateblue\"      \"mediumspringgreen\"   \n[475] \"mediumturquoise\"      \"mediumvioletred\"      \"midnightblue\"        \n[478] \"mintcream\"            \"mistyrose\"            \"mistyrose1\"          \n[481] \"mistyrose2\"           \"mistyrose3\"           \"mistyrose4\"          \n[484] \"moccasin\"             \"navajowhite\"          \"navajowhite1\"        \n[487] \"navajowhite2\"         \"navajowhite3\"         \"navajowhite4\"        \n[490] \"navy\"                 \"navyblue\"             \"oldlace\"             \n[493] \"olivedrab\"            \"olivedrab1\"           \"olivedrab2\"          \n[496] \"olivedrab3\"           \"olivedrab4\"           \"orange\"              \n[499] \"orange1\"              \"orange2\"              \"orange3\"             \n[502] \"orange4\"              \"orangered\"            \"orangered1\"          \n[505] \"orangered2\"           \"orangered3\"           \"orangered4\"          \n[508] \"orchid\"               \"orchid1\"              \"orchid2\"             \n[511] \"orchid3\"              \"orchid4\"              \"palegoldenrod\"       \n[514] \"palegreen\"            \"palegreen1\"           \"palegreen2\"          \n[517] \"palegreen3\"           \"palegreen4\"           \"paleturquoise\"       \n[520] \"paleturquoise1\"       \"paleturquoise2\"       \"paleturquoise3\"      \n[523] \"paleturquoise4\"       \"palevioletred\"        \"palevioletred1\"      \n[526] \"palevioletred2\"       \"palevioletred3\"       \"palevioletred4\"      \n[529] \"papayawhip\"           \"peachpuff\"            \"peachpuff1\"          \n[532] \"peachpuff2\"           \"peachpuff3\"           \"peachpuff4\"          \n[535] \"peru\"                 \"pink\"                 \"pink1\"               \n[538] \"pink2\"                \"pink3\"                \"pink4\"               \n[541] \"plum\"                 \"plum1\"                \"plum2\"               \n[544] \"plum3\"                \"plum4\"                \"powderblue\"          \n[547] \"purple\"               \"purple1\"              \"purple2\"             \n[550] \"purple3\"              \"purple4\"              \"red\"                 \n[553] \"red1\"                 \"red2\"                 \"red3\"                \n[556] \"red4\"                 \"rosybrown\"            \"rosybrown1\"          \n[559] \"rosybrown2\"           \"rosybrown3\"           \"rosybrown4\"          \n[562] \"royalblue\"            \"royalblue1\"           \"royalblue2\"          \n[565] \"royalblue3\"           \"royalblue4\"           \"saddlebrown\"         \n[568] \"salmon\"               \"salmon1\"              \"salmon2\"             \n[571] \"salmon3\"              \"salmon4\"              \"sandybrown\"          \n[574] \"seagreen\"             \"seagreen1\"            \"seagreen2\"           \n[577] \"seagreen3\"            \"seagreen4\"            \"seashell\"            \n[580] \"seashell1\"            \"seashell2\"            \"seashell3\"           \n[583] \"seashell4\"            \"sienna\"               \"sienna1\"             \n[586] \"sienna2\"              \"sienna3\"              \"sienna4\"             \n[589] \"skyblue\"              \"skyblue1\"             \"skyblue2\"            \n[592] \"skyblue3\"             \"skyblue4\"             \"slateblue\"           \n[595] \"slateblue1\"           \"slateblue2\"           \"slateblue3\"          \n[598] \"slateblue4\"           \"slategray\"            \"slategray1\"          \n[601] \"slategray2\"           \"slategray3\"           \"slategray4\"          \n[604] \"slategrey\"            \"snow\"                 \"snow1\"               \n[607] \"snow2\"                \"snow3\"                \"snow4\"               \n[610] \"springgreen\"          \"springgreen1\"         \"springgreen2\"        \n[613] \"springgreen3\"         \"springgreen4\"         \"steelblue\"           \n[616] \"steelblue1\"           \"steelblue2\"           \"steelblue3\"          \n[619] \"steelblue4\"           \"tan\"                  \"tan1\"                \n[622] \"tan2\"                 \"tan3\"                 \"tan4\"                \n[625] \"thistle\"              \"thistle1\"             \"thistle2\"            \n[628] \"thistle3\"             \"thistle4\"             \"tomato\"              \n[631] \"tomato1\"              \"tomato2\"              \"tomato3\"             \n[634] \"tomato4\"              \"turquoise\"            \"turquoise1\"          \n[637] \"turquoise2\"           \"turquoise3\"           \"turquoise4\"          \n[640] \"violet\"               \"violetred\"            \"violetred1\"          \n[643] \"violetred2\"           \"violetred3\"           \"violetred4\"          \n[646] \"wheat\"                \"wheat1\"               \"wheat2\"              \n[649] \"wheat3\"               \"wheat4\"               \"whitesmoke\"          \n[652] \"yellow\"               \"yellow1\"              \"yellow2\"             \n[655] \"yellow3\"              \"yellow4\"              \"yellowgreen\"         \n\n\n\n\n\nThe color name is placed in quotation marks. Let us make our histogram dark blue.\n\n# Changing  colour of the histogram\nihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person), fill = \"darkblue\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nThis produces a histogram with blue bars, an x-axis labelled \"consumption_per_person\" and no title. All these three can be changed to your preference by adding extra arguments to the ggplot() function.\nFor instance, changing name of x-axis: This is done by adding argument xlab(\"name of axis\"). Note that the name of axis is in quotation marks. Lets assume these data is food consumption data.\n\nihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person), fill = \"darkblue\") + \n  xlab(\"food consumption per person (g/day)\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that in some published graphs you will find a \"solidus\" or / inbetween the name of the variable and the units. This is good practice for presenting units in axis labels, favoured by many publishers. The quantities on some axis labels have dimensions which are ratios, like gram per day. This can be done \"g/day\" but that is not good scientific practice, particularly if you are using the solidus to indicate units as above. It is better to follow the \"g\" with a power \"-1\". In R we can do this as follows (of course your data won’t be realistic for this example!)\n\n\n\n# Using expession for labelling units in x-axis\nihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person), fill = \"darkblue\") + \n  xlab(expression(\"g day\"^-1))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nChanging main title\nThis is done by adding argument ggtitle(\"name of main title\"). Note that the name of axis is in quotation marks. Lets assume these data is food consumption per person data.\n\n# Adding the title\nihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person), fill = \"darkblue\") + \n  xlab(expression(\"g day\"^-1)) +\n  ggtitle(\"Histogram of food consumption per person\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nYou can also change other features like the contour of the bins or the width.\n\n# Changing bin width of the histogram\nihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person), binwidth = 0.5) +  \n  xlab(expression(\"g day\"^-1)) +\n  ggtitle(\"Histogram of food consumption per person\") \n\n\n\n# Changing outline colour of the histogram\nihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person), colour = \"green\") +  \n  xlab(expression(\"g day\"^-1)) +\n  ggtitle(\"Histogram of food consumption per person\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\ngenerate a red histogram. Label the histogram appropriately, assuming that these are data for Food consumption per household in kilograms per week.\n\n\n\n\n\n\n6.2.2 QQ plots\nThe second type of plot we can look at is the QQ plot. This plot is used to check normality of data. The argument used is stat_qq(), and it needs to specify the sample=variable.\n\n# Starting with the empty plot \nihs5_consumption %>% \n  ggplot() \n\n\n\n\n\n# QQ plot\nihs5_consumption %>% \n  ggplot() +\n  stat_qq(aes(sample = consumption_per_person))\n\n\n\n\nThe argument for this function is the soil moisture data. The sample quantiles are just the data values, plotted in increasing order. The theoretical quantiles are the corresponding values for an ordered set of the same number of variables with the standard normal distribution (mean zero variance 1). This means that, if the data are normal, the QQ plot should lie on a straight line. The stat_qq_line() command adds this line to the plot to help your interpretation.\n\n# QQ plot + QQ line\nihs5_consumption %>% \n  ggplot() +\n  stat_qq(aes(sample = consumption_per_person)) +\n  stat_qq_line(aes(sample = consumption_per_person))\n\n\n\n\nYou can add a plot title using ggtitle(\"\") as in “histogram and you can change the stat_qq_line() color if you so wish by adding the col=\"\" argument.\n\n# QQ plot + QQ line (in red)\nihs5_consumption %>% \n  ggplot() +\n  stat_qq(aes(sample = consumption_per_person)) +\n  stat_qq_line(aes(sample = consumption_per_person), colour = \"red\") +\n  ggtitle(\"Food consumption QQ-plot\")\n\n\n\n\n\n\n\n\n\n\nExercise: qq plot\n\n\n\n\ngenerate a qq plot with a 1:1 line.\nLabel it appropriately assuming that these are data for Food consumption per household in kilograms per week.\n\n\n\n\n\n6.2.3 Box plot\nBox plots give summary of the minimum, first quartile, median, third quartile inter quartile range, maximum and outlier values in your dataset. They are used for univariate data but can be split based on a factorial variable e.g gender or region. The function that is used to call for a boxplot is geom_boxplot() and the argument is vector data. Let us try plotting using the data we generated earlier.\n\n# Boxplot\nihs5_consumption %>% \n  ggplot() +\n  geom_boxplot(aes(consumption_per_person))\n\n\n\n\nLet’s try a different orientation\n\n# Boxplot - changing the orientation\n\nihs5_consumption %>% \n  ggplot() +\n  geom_boxplot(aes(consumption_per_person)) +\n  coord_flip() \n\n\n\n\nYou can choose to label your boxplot with main title, color and label the axis similar to what we did for histograms. This time however, we label y-axis using ylab() argument.\n\n#Boxplot - changing the orientation\n\nihs5_consumption %>% \n  ggplot() +\n  geom_boxplot(aes(consumption_per_person), colour = \"dark blue\") +\n  coord_flip() +\n  ylab(\"Food consumption (g/day)\") +\n  ggtitle(\"Boxplot of food consumption per person\") \n\n\n\n\nThe thick black line in the centre of the boxplot corresponds to the median value of the data (half the values are smaller, half are larger). The bottom of the box (the blue shaded area) is the first quartile of the data, Q1 (25% of the values are smaller), and the top of the box is the third quartile of the data, Q3 (25% of the values are larger).\nIn exploratory data analysis we call the quantity H = Q3-Q1 the “h-spread”. R calculates what are known as “inner fences” of the data which are at Q1-1.5*H and Q3+1.5*H The “whiskers” above and below the box join the Q1 to the smallest data value inside the inner fences, and Q3 to the largest value inside the inner fences. If there are values outside the inner fences then these appear as points on the plot.\nIt is possible to produce a graph in which separate boxplots are produced for different levels of a factor. As an example, we would like to understand how food is consumed in the three regions in Malawi. The values are stored in the variable called region.\nWe then want to plot our data split by the corresponding region we have sampled. We use the function geom_boxplot() but this time we add a new variable.\n\n#Boxplot - by region\n\n ihs5_consumption %>% \n  ggplot() +\n  geom_boxplot(aes(consumption_per_person, region))\n\n\n\n\nNow, we can delete the x-axis label using the xlab(), label the y-axis and change the title to reflect the new variable.\n\n# Boxplot - by region \n\n ihs5_consumption %>% \n  ggplot() +\n  geom_boxplot(aes(consumption_per_person, region), colour = \"dark blue\") +\n  coord_flip() +\n  xlab(\"\") +\n  ylab(\"Food consumption (g/day)\") +\n  ggtitle(\"Boxplot of food consumption per person per region\") \n\n\n\n\n\n\n\nExercise: Box plot\n\n\n\nUsing the data create:\n\nthree boxplots one for each the regions and\nexclude the label in the x-axis,\nlabel the boxplots appropriately.\nare there any outliers in your data?\n\n\n\n\n\n6.2.4 Bar plot\nThis allows us to create a bar chart where the heights of the bars are based on the values given by the vector input. The argument that is used to call for a barplot is geom_bar() and the argument is our region data. There are additional options for giving names to each of the bars, for instance, and for coloring the bars, as you have seen for other earlier plots. This function usually works well when you have tabular data. The simplest form for the function geom_bar() is given below.\n\n#Bar plot\n  ihs5_consumption %>% \n  ggplot() +\n  geom_bar(aes(region))\n\n\n\n# Checking the results of the barplot\ntable(ihs5_consumption$region)\n\n\n  1   2   3 \n805 469 438 \n\n\nYou can check the results by using the function table(), which provide you a count per each variable.\nAlso, you can choose to add labels to bar plot as earlier mentioned for the previous plots. You can as well change the color of the bars.\n\n  ihs5_consumption %>% \n  ggplot() +\n  geom_bar(aes(region)) +\n  xlab(\"Regions\") +\n  ylab(\"count\") +\n  ggtitle(\"Number of foods reported per region\") \n\n\n\n\nYou can also change the axis, by using the ylim() function\n\n# Changing limits and colour\n  ihs5_consumption %>% \n  ggplot() +\n  geom_bar(aes(region),  fill = \"light blue\") +\n  ylim(0,810) +\n   xlab(\"Regions\") +\n  ylab(\"count\") +\n  ggtitle(\"Number of foods reported per region\") \n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat would it happen if you change the y-axis limit from (0, 810) to (0, 800)?\n\n\nYou can also change the colour by each site, that will provide a distinct colour for each site.\n\n# Changing limits and colour by region\n\n  ihs5_consumption %>% \n  ggplot() +\n  geom_bar(aes(region,  fill = region)) +\n  ylim(0,810) +\n   xlab(\"Regions\") +\n  ylab(\"count\") +\n  ggtitle(\"Number of foods reported per region\") \n\n\n\n\n\n\n\n\n\n\nExercise: Bar plot\n\n\n\n\nCreate a bar plot to show the frequency of the food consumed by region in the sample,\nlabel it and adjust the axis and colour appropriately."
  },
  {
    "objectID": "data_visualisation.html#multivariate-graphs",
    "href": "data_visualisation.html#multivariate-graphs",
    "title": "6  Data Visualisation",
    "section": "6.3 Multivariate graphs",
    "text": "6.3 Multivariate graphs\nIn this section, we look at graphics that we may create with multiple variables. They are important in checking how two or more variables relate to each other.\n\n6.3.1 Plots\nThe simplest scatter plot is done using the geom_point() function which takes in two arguments. The first argument represents the x-axis while the second argument is the vector of y-axis.\n\n# The data points per site (x, y)\n  ihs5_consumption %>% \n  ggplot() +\n  geom_point(aes(region, consumption_per_person)) \n\nFrom the scatter plot, you will notice that, by default,it added axis labels that are simply the names of the objects we passed i.e consumption_per_person and region and there is no title. All of these things, can be added as previous graphs.\nThe list below shows arguments that can be added to the plot function as discussed already:\n\nxlab(\"Region\")\nylab(\"Food compsumption (g/day\")\nggtitle(\"Food consumption by different regions in Malawi\")\n\n\n # The changing the colour of the data points per site (x, y)\nihs5_consumption %>% \n  ggplot() +\n  geom_point(aes(region, consumption_per_person), \n             colour = \"red\") + # Define the colour of the symbols\n  xlab(\"Region\") +\n  ylab(\"Food compsumption (g/day\") +\n  ggtitle(\"Food consumption by different regions in Malawi\")\n\n\n\n\n\n\n6.3.2 Plot Symbols\nIn the graphics that we have created so far, we have mostly left the plotting symbol as the default, black, unfilled circle. However, We can change the symbol by using the argument shape.\nYou can change the plotting symbol by assigning a numeric value using = sign. There are two categories of symbols. Those that range from 0 to 20 and from 21 to 25. For the symbols that range from 21 to 25, in addition to being able to set the colour, we can also set the fill. The fill of the shapes is actually set with the argument fill=, but just like with the argument colour=, we can assign any colour value.\n\n # Changing the symbol & colour of the data points per site (x, y)\nihs5_consumption %>% \n  ggplot() +\n  geom_point(aes(region, consumption_per_person),\n             shape = 17,  # Defining the symbol\n             colour = \"red\") + # Defining the colour\n  xlab(\"Region\") +\n  ylab(\"Food compsumption (g/day\") +\n  ggtitle(\"Food consumption by different regions in Malawi\")\n\n\n\n\nLet us change the fill color of the symbol by using the fill argument. Remember that only symbol from 21 to 25 allow that that argument.\n\n # Changing the symbol, the outline colour and the fill colour of the data points per site (x, y)\n\nihs5_consumption %>% \n  ggplot() +\n  geom_point(aes(region, consumption_per_person),\n             shape = 23, # Define the shape\n             colour = \"red\",  # Define outline colour\n             fill = \"black\") + # Define fill colour\n  xlab(\"Region\") +\n  ylab(\"Food compsumption (g/day\") +\n  ggtitle(\"Food consumption by different regions in Malawi\")\n\n\n\n\nWe can also set the size of the symbols. We do this with the argument size=. This argument is simply a numeric value indicating how bigger(or smaller) than the usual size we want our points.\n\nihs5_consumption %>% \n  ggplot() +\n  geom_point(aes(region, consumption_per_person), \n    # Next arguments change the symbol (point)\n             shape = 23,   # Define the symbol\n             colour = \"red\", # Define the outline colour\n             fill = \"black\",  # Define the fill colour \n             size =3) +      # Define the size\n  xlab(\"Region\") +\n  ylab(\"Food compsumption (g/day\") +\n  ggtitle(\"Food consumption by different regions in Malawi\")\n\n\n\n\n\n\n\n\n\n\nExercise 3.6\n\n\n\n\nUpdate plots with different symbols, fill colors and symbol size. You can use any symbol and fill color of your choice.\n\n\n\n\n\n\n\nTip\n\n\n\nNote: not all symbol types accept changing fill color.\n\n\n\n\n\n\n6.3.3 Plot types\nThe plot we have created so far are scatter plots. We can however, use alternative plot types. These may include line plot, step plot and lines with points among others.\n\n\n\n\n\n\nExercise 3.7\n\n\n\nCreate a plot using the variables consumption_quantity, consumption_per_person.\n\n\n\n\n\n\n\n\nExercise 3.8\n\n\n\nFrom your plot in Exercise 3.7 , update plots to differentiate the household size (hh_members) using symbol type and color, fill colors and symbol size. You can use any symbol and fill color of your choice.\n\n\n\n\n\n\nTip\n\n\n\nNote: not all symbol types accept changing fill color.\n\n\n\n\nFrom the dataframe ihs5_consumption, we can plot the data by the different household size on the same plot using colour=.\n\n# Scatterplot of food consumption per person & hh by hh size\nihs5_consumption %>% \n  ggplot()+\n  geom_point(aes(consumption_quantity, consumption_per_person, \n                 colour=hh_members)) + # Define colour by hh size\n  xlab(\"Food consumption per person (g/day)\") + # Rename x-axis\n  ylab(\"Food consumption per household (g/day)\") + # Rename y-axis\n  # Adding a title\n  ggtitle(\"Variation of the food consumption per person & houehold by different household size\")\n\n\n\n\nYou can also change the symbol shape by any variable, for instance, region\n\n# Plotting the food consumption per person & hh by hh size (colour) and region  (shape)\nihs5_consumption %>% \n  ggplot()+\n  geom_point(aes(consumption_quantity, consumption_per_person, \n                 shape=region, # Defining shape by region\n                 colour=hh_members)) + # Define colour by hh size\n  xlab(\"Food consumption per person (g/day)\") + # Rename x-axis\n  ylab(\"Food consumption per household (g/day)\") + # Rename y-axis\n  # Adding a title\n  ggtitle(\"Variation of the food consumption per person & household by different household size & region\")\n\n\n\n\n\n\n6.3.4 Adding Legend to plot\nAdding a legend to your plot will make your plot easy to translate. From the plot in the previous section, it is not clear what the different colors or shapes represent. A legend provides information for this.The function to use is theme() combined with legend.position().\nThe first argument to this function is the position of the legend on your plot. This can be done either by using X and Y co-ordinate location or a single string of the form \"bottom\", \"top\", \"left\", \"topleft\" among others.\nWe then need to specify the legend text using legend.text argument. This is a vector of text that will be used to label the legend. The order of the text in the vector should correspond to the order of the points in the plot.\nWe then specify colors, points, and so on, for data added maintaining the ordering.\nLets create the legend for the plot of soil moisture vs temperature at the sites liempe, chitedze and domboshava. Note that a plot must already be active for legend to be used.\n\n# Plotting the food consumption per person & hh by hh size (colour) and region  (shape)\n# Changing the position of the legend\nihs5_consumption %>% \n  ggplot()+\n  geom_point(aes(consumption_quantity, consumption_per_person, \n                 shape=region, # Defining shape by region\n                 colour=hh_members)) + # Define colour by hh size\n  xlab(\"Food consumption per person (g/day)\") + # Rename x-axis\n  ylab(\"Food consumption per household (g/day)\") + # Rename y-axis\n  # Adding a title\n  ggtitle(\"Variation of the food consumption per person & household by different household size & region\")+\n   theme(legend.position = \"bottom\") # Changing the position of the legend\n\n\n\n\nOne can alternatively use the x,y position on the plot to position the legend\n\n# Plotting the food consumption per person & hh by hh size (colour) and region  (shape)\n# Specifying the location of the legend\nihs5_consumption %>% \n  ggplot()+\n  geom_point(aes(consumption_quantity, consumption_per_person, \n                 shape=region, # Defining shape by region\n                 colour=hh_members)) + # Define colour by hh size\n  xlab(\"Food consumption per person (g/day)\") + # Rename x-axis\n  ylab(\"Food consumption per household (g/day)\") + # Rename y-axis\n  # Adding a title\n  ggtitle(\"Variation of the food consumption per person & household by different household size & region\")+\n  # Specifying the position of the legend\n  theme(legend.position = c(.1, .6)) \n\n\n\n\n\n\n\n\n\n\nExercise 3.9\n\n\n\nFrom your previous plot in exercise 3.8, add a legend to the updated plot that differentiate the region using symbol type and color, fill colors and symbol size.\n\n\n\n\n6.3.5 Controlling graphical layout\nWhen we create plots, we may want to present them on the same page for easy comparison. This can be done in two ways, firstly, using the facetting (e.g., facet_wrap()) or using the plot_grid() function.\n\nUsing facet function\nThere are two facet_ functions within the ggplot. The first one facet_wrap is commonly used when you only need to visualise your data based on one categorical variable. It only needs to specify the variable (vars()) by which one you want to separate your data by. When you have more than one categorical variables that you want to split you daya by, the function facet_grid() would allow more flexibility.\n\n# Plotting the food consumption per person & hh by region\nihs5_consumption %>% \n  ggplot()+\n  geom_point(aes(consumption_quantity, consumption_per_person)) +\n  # Adding the variable for splitting the data\n   facet_wrap(vars(region)) +\n  xlab(\"Food consumption per person (g/day)\") + # Rename x-axis\n  ylab(\"Food consumption per household (g/day)\") + # Rename y-axis\n  # Adding a title\n  ggtitle(\"Variation of the food consumption per person & household by different household size & region\") \n\n\n\n\n\n\nUsing plot_grid() function\nThis function is not part of the ggplot2 package, therefore it has to be installed and loaded before using it (For more information about packages see Section 4.2.\n\n# Installing the package for the first time\n# instal.package(\"cowplot\")\n\n# Loading the library\nlibrary(cowplot)\n\nWith thhe plot_grid we can set up a graphics using the nrow argument. The argument is a vector of the number of rows and columns into which our device should be split. When we then create and store the graphics, they will be entered into the device across the rows, starting in the top left of the grid.\nAs an example, let’s use some of the graphs that we have been creating, and plote them together.\nFirst, we are going to plot and save the scatter plot with the faceted region as an object in our environment called graph1.\n\n\n\n\n\n\nTip\n\n\n\nNote: If you place parenthesis () around your code when saving the object the object will be printed.\n\n\n\n# Saving the graph1: Food consumption per person & hh by region\n\ngraph1 <- ihs5_consumption %>% \n  ggplot()+\n  geom_point(aes(consumption_quantity, consumption_per_person)) +\n  # Adding the variable for splitting the data\n   facet_wrap(vars(region)) +\n  xlab(\"Food consumption per person (g/day)\") + # Rename x-axis\n  ylab(\"Food consumption per household (g/day)\") + # Rename y-axis\n  # Adding a title\n  ggtitle(\"Variation of the food consumption per person & household by different household size & region\")\n\ngraph1\n\nThen, let’s do the same for the box plot and the histogram.\n\n# Saving the graph2: Food consumption per person by region\n (graph2 <- ihs5_consumption %>% \n  ggplot() +\n  geom_boxplot(aes(consumption_per_person, region), colour = \"dark blue\") +\n  coord_flip() +\n  xlab(\"\") +\n  ylab(\"Food consumption (g/day)\") +\n  ggtitle(\"Boxplot of food consumption per person per region\"))\n\n\n\n# Saving the graph3: Food consumption per person histogram\n(graph3 <- ihs5_consumption %>% \n  ggplot() +\n  geom_histogram(aes(consumption_per_person), fill = \"darkblue\") + \n  xlab(expression(\"g day\"^-1)) +\n  ggtitle(\"Histogram of food consumption per person\")) \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nOnce we have our graphs (objects), let’s plot them together into two rows. We can see that it fills the first row, with the graph1 and graph2, and then the second row with the graph3\n\n# Plotting the three graph together\ncowplot::plot_grid(graph1, graph2, graph3, nrow = 2)\n\nThen, we can add labels to each plot by using the function label=. If we use the \"AUTO\". It will automatically label them from A-Z in the order as they appeard. We can change it to cou\n\n# Plotting the three graph together with label\nplot_grid(graph1, graph2, graph3, nrow = 2, labels = \"AUTO\")\n\nWe can customise the labels by changing the label function.\n\n# Plotting the three graph together\ncowplot::plot_grid(graph1, graph2, graph3, nrow = 2, \n          labels = c(\"1)\", \"2)\", \"3)\"))\n\nWe can also change the way it is structure, by plotting two graphs as it was one. Let’s save the two first graphs as one combined graph.\n\n(top_row <- cowplot::plot_grid(graph2, graph3, ncol = 2, labels = \"AUTO\"))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nThen, we can plot the again using the top_row object.\n\n# Re-arragning the plots\ncowplot::plot_grid(top_row, graph1, nrow = 2, labels = c(\"\", \"C\"))\n\nWe can see now that there are two plots are now in the first row (there are considered one graph), and the graph at the bottom (graph1) is spread across the second row.\nIn addition, we can change the space that each graph is occupying. For instance, we would like to decrease the size of the histogram and the boxplot (top_row). Note that as it is one graph you can not change the size of the histogram or the boxplot indepdently here.\n\ncowplot::plot_grid(top_row, graph1, nrow = 2, labels = c(\"\", \"C\"), \n          rel_heights = c(0.7, 1, 1))\n\n\nx <- rnorm(100)\n\n#layout(mat)\nlayout(x)\n\nhist(x)\n#boxplot(x)\nqqnorm(x)\nplot(x)\n\n\n\n\n\n\n\nExercise 3.10\n\n\n\nUsing the iris data, generate\n\nhistogram of Sepal Length,\nboxplot of Petal Length,\nqq plot of Petal Width and\na plot of Sepal Length against Petal Length on the same plot area with equal dimensions.\n\n\n\n\n\n\n\n\n\nExercise 3.11\n\n\n\nAdjust, the plot in the previous exercise so that histogram occupies the whole bottom of the plot area and the other three occupy the top of the plot area in equal dimensions.\n\n\n\n\n\n6.3.6 Saving/Printing plots\nNow that we have known how to create graphics, one thing remaining is to print out the output. A number of graphics devices are available, including PDF, PNG, JPEG, and bitmap. If we do not specify the device to use, the default device will be opened, and in R this is the Plot tab.\nTo print a graph to pdf ,png and jpeg, one must create the device before plotting the graph. This is done by using the functions\n\npdf(\"name.pdf\")\npng(\"name.pgn\")\njpeg(\"name.jpeg\") \n\nThe argument for these functions is the desired name of the document in quotation marks e.g. pdf(\"myFirstGraphic.pdf\"). When this function is run, the plot tab in R will not appear but a pdf of the graph will be produced in the working directory.\nLet us create a histogram of 100 random numbers and save it as a pdf document.\n\n# Create a pdf device\npdf(\"myFirstGraphic.pdf\")\n\n# Create a histogram of 100 random numbers\nhist(rnorm(100))\n\n# Close the device\ndev.off() \n\nRemember to close the device when done using the dev.off() function, otherwise all your graphics onward will be pdf documents and not any other device e.g the R plot tab.\n\n\n\n\n\n\nExercise 3.12\n\n\n\nPrint the plot you generated in EXERCISE to a PDF, PNG and JPEG giving it an appropriate name. Remember to close the device"
  }
]